{"version":3,"sources":["style.module.scss","GetGeometry.tsx","index.tsx"],"names":["module","exports","GetGeometry","state","ladybugGeometry","isPollinationModel","isFocused","syncToken","render","className","styles","poButton","onClick","onClicked","disabled","props","onFocus","_onFocus","onBlur","_onBlur","style","margin","src","process","alt","args","setStateNow","newState","setState","prevState","Streamlit","setComponentValue","console","log","dotNetRun","window","parent","chrome","webview","geo","hostObjects","sync","hbjson","PassPollinationModel","geometry","PassJsonGeometry","Geometry","this","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,SAAW,0B,4KCqBvBC,E,4MACGC,MAAQ,CAAEC,gBAAiB,GAClCC,oBAAoB,EACpBC,WAAW,EACXC,UAAW,I,EAEJC,OAAS,WAMd,OACE,8BACE,4BACEC,UAAWC,IAAOC,SAClBC,QAAS,EAAKC,UACdC,SAAU,EAAKC,MAAMD,SACrBE,QAAS,EAAKC,SACdC,OAAQ,EAAKC,SAEb,8BACE,yBAAKC,MAdI,CACfC,OAAQ,mBAcFC,IAAKC,wBACLC,IAAI,UAVR,OAYQ,EAAKT,MAAMU,KAAX,mBACJ,oBACA,WACE,EAAKV,MAAMU,KAAX,WACF,a,EAiBFC,YAAc,SAACC,GAErB,EAAKC,UACH,SAACC,GAAD,mBAAC,eACIA,GADL,IAEEzB,gBAAiBuB,EAASvB,gBAC1BC,mBAAoBsB,EAAStB,mBAC7BE,UAAWoB,EAASpB,eAEtB,kBAAMuB,IAAUC,kBAAkB,EAAK5B,MAAMC,oBAE/C4B,QAAQC,IAAI,2C,EAGNC,UAAY,WAClB,GAAmC,oBAAxBC,OAAOC,OAAOC,OAAuB,CAC9C,GAA2C,oBAAhCF,OAAOC,OAAOC,OAAOC,QAG9B,OADAN,QAAQC,IAAI,2CACL,EAAK9B,MAId,IAAIoC,EAAM,KAkBV,MANe,CACbnC,gBALuB,OAHvBmC,EAJG,EAAKxB,MAAMU,KAAX,mBAIGU,OAAOC,OAAOC,OAAOC,QAC1BE,YAAYC,KAAKC,OAAOC,uBAJnBR,OAAOC,OAAOC,OAAOC,QAC1BE,YAAYC,KAAKG,SAASC,oBAM3BN,EAAIO,SACJ,KAIAzC,mBAAoB,EAAKU,MAAMU,KAAX,mBACpBlB,UAAW,EAAKQ,MAAMU,KAAX,WAQb,OADAO,QAAQC,IAAI,0CACL,EAAK9B,O,EAIRU,UAAY,WAClB,IAAMc,EAAW,EAAKO,YACtB,EAAKR,YAAYC,I,EAGXV,SAAW,WACjB,EAAKW,SAAS,CAAEtB,WAAW,K,EAGrBa,QAAU,WAChB,EAAKS,SAAS,CAAEtB,WAAW,K,wDAvE7B,WACE,GAAIyC,KAAK5C,MAAMI,YACTwC,KAAKhC,MAAMU,KAAX,WAC8B,KAA/BsB,KAAK5C,MAAMC,gBAChB,CACE,IAAMuB,EAAWoB,KAAKb,YACtBa,KAAKrB,YAAYC,GAEnBK,QAAQC,IAAI,yC,GA5CUe,KA+GXC,cAAwB/C,GCjIvCgD,IAAS1C,OACP,kBAAC,IAAM2C,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.efc06c93.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poButton\":\"style_poButton__3x8Ka\"};","import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\n\nimport styles from './style.module.scss';\n\ninterface State {\n  ladybugGeometry: string\n  isPollinationModel: boolean\n  isFocused: boolean\n  syncToken: string\n}\n\ndeclare global {\n  interface Window {\n    chrome: any;\n  }\n}\n\nclass GetGeometry extends StreamlitComponentBase<State> {\n  public state = { ladybugGeometry: \"\", \n  isPollinationModel: false,\n  isFocused: false,\n  syncToken: \"\" }\n\n  public render = (): ReactNode => {\n\n    const imgStyle = {\n      margin: \"0px 3px 2px 0px\"\n    }\n\n    return (\n      <span>\n        <button\n          className={styles.poButton}\n          onClick={this.onClicked}\n          disabled={this.props.disabled}\n          onFocus={this._onFocus}\n          onBlur={this._onBlur}\n        >\n          <span>\n            <img style={imgStyle} \n            src={process.env.PUBLIC_URL + '/img/pollination.png'} \n            alt=\"logo\" />\n          </span>\n          Get { this.props.args[\"isPollinationModel\"] ? \n            \"Pollination Model\" : \n            \"Geometry\" } \n            { this.props.args[\"syncToken\"] && \n            \" (Sync)\" }\n        </button>\n      </span>\n    )\n  }\n\n  componentDidUpdate() {\n    if (this.state.syncToken \n      !== this.props.args[\"syncToken\"]\n      && this.state.ladybugGeometry !== \"\")\n    {\n      const newState = this.dotNetRun();\n      this.setStateNow(newState);\n    }\n    console.log('[POLLINATION-DEBUG]: auto-update.');\n  }\n\n  private setStateNow = (newState: State): \n    void => {\n    this.setState(\n      (prevState) => ({ \n        ...prevState, \n        ladybugGeometry: newState.ladybugGeometry,\n        isPollinationModel: newState.isPollinationModel,\n        syncToken: newState.syncToken\n      }),\n      () => Streamlit.setComponentValue(this.state.ladybugGeometry)\n    );\n    console.log('[POLLINATION-DEBUG]: JSON string sent.');\n  }\n\n  private dotNetRun = (): State => {\n    if (typeof window.parent.chrome != \"undefined\") {\n      if (typeof window.parent.chrome.webview == \"undefined\")\n      {\n        console.log('[POLLINATION-DEBUG]: webview not found.');\n        return this.state;\n      }\n\n      // DotNet invoke\n      let geo = null;\n      if (!this.props.args[\"isPollinationModel\"]) {\n        geo = window.parent.chrome.webview\n        .hostObjects.sync.geometry.PassJsonGeometry();\n      } else {\n        geo = window.parent.chrome.webview\n        .hostObjects.sync.hbjson.PassPollinationModel();\n      }\n      let updatedVal = (geo != null) ? \n        geo.Geometry :\n        null;\n  \n      var newState = {\n        ladybugGeometry: updatedVal,\n        isPollinationModel: this.props.args[\"isPollinationModel\"],\n        syncToken: this.props.args[\"syncToken\"]\n      } as State;\n  \n      return newState;\n    }\n    else\n    {\n      console.log('[POLLINATION-DEBUG]: chrome not found.');\n      return this.state;\n    }\n  }\n\n  private onClicked = (): void => {\n    const newState = this.dotNetRun();\n    this.setStateNow(newState);\n  }\n\n  private _onFocus = (): void => {\n    this.setState({ isFocused: true })\n  }\n\n  private _onBlur = (): void => {\n    this.setState({ isFocused: false })\n  }\n}\n\nexport default withStreamlitConnection(GetGeometry)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport GetGeometry from \"./GetGeometry\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <GetGeometry />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}