{"version":3,"sources":["style.module.scss","SendGeometry.tsx","index.tsx"],"names":["module","exports","SendGeometry","state","action","data","uniqueId","options","layer","units","isFocused","render","labels","props","args","className","styles","poButton","onClick","onClicked","disabled","onFocus","_onFocus","onBlur","_onBlur","style","margin","src","process","alt","window","parent","chrome","webview","console","log","msgObject","json","JSON","stringify","postMessage","setState","prevState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"gIACAA,EAAOC,QAAU,CAAC,SAAW,0B,4KC6BvBC,E,4MACGC,MAAQ,CACXC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,QAAS,CACPC,MAAO,GACPC,MAAO,IAETC,WAAW,G,EAGRC,OAAS,WACd,IAAIC,EAAiB,CACnB,aAAgB,gBAChB,cAAiB,iBACjB,aAAgB,gBAChB,YAAe,eACf,qBAAwB,0BAO1B,OACE,8BACI,EAAKC,MAAMC,KAAX,UAA6BF,GAC/B,4BACEG,UAAWC,IAAOC,SAClBC,QAAS,EAAKC,UACdC,SAAU,EAAKP,MAAMO,SACrBC,QAAS,EAAKC,SACdC,OAAQ,EAAKC,SAEb,8BACE,yBAAKC,MAfI,CACfC,OAAQ,mBAcoBC,IAAKC,wBAAiDC,IAAI,UAEhFjB,EAAO,EAAKC,MAAMC,KAAX,W,EAOTK,UAAY,WAClB,GAAmC,oBAAxBW,OAAOC,OAAOC,OAAuB,CAC9C,GAA2C,oBAAhCF,OAAOC,OAAOC,OAAOC,QAG9B,YADAC,QAAQC,IAAI,2CAId,IAAIC,EAAY,CACdhC,OAAQ,EAAKS,MAAMC,KAAX,OACRT,KAAM,EAAKQ,MAAMC,KAAX,KACNR,SAAU,EAAKO,MAAMC,KAAX,SACVP,QAAS,EAAKM,MAAMC,KAAX,SAEPuB,EAAOC,KAAKC,UAAUH,GAC1BN,OAAOC,OAAOC,OAAOC,QAAQO,YAAYH,GAEzC,EAAKI,UACH,SAACC,GAAD,mBAAC,eACIA,GADL,IAEEtC,OAAQgC,EAAUhC,OAClBC,KAAM+B,EAAU/B,KAChBC,SAAU8B,EAAU9B,SACpBC,QAAS6B,EAAU7B,aAErB,kBAAMoC,IAAUC,kBAAkB,EAAKzC,MAAMC,WAE/C8B,QAAQC,IAAI,+CAIZD,QAAQC,IAAI,2C,EAIRb,SAAW,WACjB,EAAKmB,SAAS,CAAE/B,WAAW,K,EAGrBc,QAAU,WAChB,EAAKiB,SAAS,CAAE/B,WAAW,K,yBArFJmC,KAyFZC,cAAwB5C,GCnHvC6C,IAASpC,OACP,kBAAC,IAAMqC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.f34693c1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"poButton\":\"style_poButton__3x8Ka\"};","import {\r\n  Streamlit,\r\n  StreamlitComponentBase,\r\n  withStreamlitConnection,\r\n} from \"streamlit-component-lib\"\r\nimport React, { ReactNode } from \"react\"\r\n\r\nimport styles from './style.module.scss';\r\n\r\ninterface State {\r\n  action: string\r\n  data: string\r\n  uniqueId: string\r\n  options: {\r\n    layer: string,\r\n    units: string\r\n  }\r\n  isFocused: boolean\r\n}\r\n\r\ninterface Labels {\r\n  [key: string]: string;\r\n}\r\n\r\ndeclare global {\r\n  interface Window {\r\n    chrome: any;\r\n  }\r\n}\r\n\r\nclass SendGeometry extends StreamlitComponentBase<State> {\r\n  public state = {\r\n      action: '',\r\n      data: '',\r\n      uniqueId: '',\r\n      options: {\r\n        layer: '',\r\n        units: ''\r\n      },\r\n      isFocused: false \r\n    }\r\n\r\n  public render = (): ReactNode => {\r\n    let labels: Labels = {\r\n      \"BakeGeometry\": \"Bake Geometry\",\r\n      \"ClearGeometry\": \"Clear Geometry\",\r\n      \"DrawGeometry\": \"Draw Geometry\",\r\n      \"DisableDraw\": \"Disable Draw\",\r\n      \"BakePollinationModel\": \"Bake Pollination Model\"\r\n    }\r\n\r\n    const imgStyle = {\r\n      margin: \"0px 3px 2px 0px\"\r\n    }\r\n\r\n    return (\r\n      <span>\r\n        { this.props.args[\"action\"] in labels && (\r\n        <button\r\n          className={styles.poButton}\r\n          onClick={this.onClicked}\r\n          disabled={this.props.disabled}\r\n          onFocus={this._onFocus}\r\n          onBlur={this._onBlur}\r\n        >\r\n          <span>\r\n            <img style={imgStyle} src={process.env.PUBLIC_URL + '/img/pollination.png'} alt=\"logo\" />\r\n          </span>\r\n          { labels[this.props.args[\"action\"]] }\r\n        </button>\r\n        )}\r\n      </span>\r\n    )\r\n  }\r\n\r\n  private onClicked = (): void => {\r\n    if (typeof window.parent.chrome != \"undefined\") {\r\n      if (typeof window.parent.chrome.webview == \"undefined\")\r\n      {\r\n        console.log('[POLLINATION-DEBUG]: webview not found.');\r\n        return;\r\n      }\r\n      \r\n      var msgObject = {\r\n        action: this.props.args[\"action\"],\r\n        data: this.props.args[\"data\"],\r\n        uniqueId: this.props.args[\"uniqueId\"],\r\n        options: this.props.args[\"options\"]\r\n      };\r\n      var json = JSON.stringify(msgObject);\r\n      window.parent.chrome.webview.postMessage(json);\r\n\r\n      this.setState(\r\n        (prevState) => ({ \r\n          ...prevState, \r\n          action: msgObject.action,\r\n          data: msgObject.data,\r\n          uniqueId: msgObject.uniqueId,\r\n          options: msgObject.options\r\n        }),\r\n        () => Streamlit.setComponentValue(this.state.action)\r\n      );\r\n      console.log('[POLLINATION-DEBUG]: JSON string sent.');\r\n    }\r\n    else\r\n    {\r\n      console.log('[POLLINATION-DEBUG]: chrome not found.');\r\n    }\r\n  }\r\n\r\n  private _onFocus = (): void => {\r\n    this.setState({ isFocused: true })\r\n  }\r\n\r\n  private _onBlur = (): void => {\r\n    this.setState({ isFocused: false })\r\n  }\r\n}\r\n\r\nexport default withStreamlitConnection(SendGeometry)\r\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport SendGeometry from \"./SendGeometry\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <SendGeometry />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}