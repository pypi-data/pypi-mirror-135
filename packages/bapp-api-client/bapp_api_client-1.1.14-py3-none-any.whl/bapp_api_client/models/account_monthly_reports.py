# coding: utf-8

"""
    BAPP API

    Test description  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class AccountMonthlyReports(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'emails': 'list[str]',
        'type': 'str',
        'from_date': 'date',
        'to_date': 'date'
    }

    attribute_map = {
        'emails': 'emails',
        'type': 'type',
        'from_date': 'from_date',
        'to_date': 'to_date'
    }

    def __init__(self, emails=None, type='pdf', from_date=None, to_date=None, _configuration=None):  # noqa: E501
        """AccountMonthlyReports - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._emails = None
        self._type = None
        self._from_date = None
        self._to_date = None
        self.discriminator = None

        if emails is not None:
            self.emails = emails
        if type is not None:
            self.type = type
        if from_date is not None:
            self.from_date = from_date
        if to_date is not None:
            self.to_date = to_date

    @property
    def emails(self):
        """Gets the emails of this AccountMonthlyReports.  # noqa: E501

          # noqa: E501

        :return: The emails of this AccountMonthlyReports.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this AccountMonthlyReports.

          # noqa: E501

        :param emails: The emails of this AccountMonthlyReports.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def type(self):
        """Gets the type of this AccountMonthlyReports.  # noqa: E501


        :return: The type of this AccountMonthlyReports.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AccountMonthlyReports.


        :param type: The type of this AccountMonthlyReports.  # noqa: E501
        :type: str
        """
        allowed_values = ["saga", "gestwin", "pdf"]  # noqa: E501
        if (self._configuration.client_side_validation and
                type not in allowed_values):
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def from_date(self):
        """Gets the from_date of this AccountMonthlyReports.  # noqa: E501


        :return: The from_date of this AccountMonthlyReports.  # noqa: E501
        :rtype: date
        """
        return self._from_date

    @from_date.setter
    def from_date(self, from_date):
        """Sets the from_date of this AccountMonthlyReports.


        :param from_date: The from_date of this AccountMonthlyReports.  # noqa: E501
        :type: date
        """

        self._from_date = from_date

    @property
    def to_date(self):
        """Gets the to_date of this AccountMonthlyReports.  # noqa: E501


        :return: The to_date of this AccountMonthlyReports.  # noqa: E501
        :rtype: date
        """
        return self._to_date

    @to_date.setter
    def to_date(self, to_date):
        """Sets the to_date of this AccountMonthlyReports.


        :param to_date: The to_date of this AccountMonthlyReports.  # noqa: E501
        :type: date
        """

        self._to_date = to_date

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AccountMonthlyReports, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AccountMonthlyReports):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AccountMonthlyReports):
            return True

        return self.to_dict() != other.to_dict()
