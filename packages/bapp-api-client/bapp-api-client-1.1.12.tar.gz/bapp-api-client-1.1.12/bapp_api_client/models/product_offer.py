# coding: utf-8

"""
    BAPP API

    Test description  # noqa: E501

    OpenAPI spec version: v1
    Contact: contact@snippets.local
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from bapp_api_client.configuration import Configuration


class ProductOffer(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'agent_vanzari': 'str',
        'agent_fax': 'str',
        'agent_phone1': 'str',
        'agent_phone2': 'str',
        'location': 'str',
        'company_phones': 'str',
        'location_detail': 'str',
        'adaos': 'int',
        'category': 'int',
        'discount': 'int',
        'partner': 'int',
        'include_image': 'bool',
        'include_stock': 'bool',
        'vat': 'bool',
        'emails': 'list[str]',
        'template': 'int',
        'alphabetical_order': 'bool'
    }

    attribute_map = {
        'agent_vanzari': 'agent_vanzari',
        'agent_fax': 'agent_fax',
        'agent_phone1': 'agent_phone1',
        'agent_phone2': 'agent_phone2',
        'location': 'location',
        'company_phones': 'company_phones',
        'location_detail': 'location_detail',
        'adaos': 'adaos',
        'category': 'category',
        'discount': 'discount',
        'partner': 'partner',
        'include_image': 'include_image',
        'include_stock': 'include_stock',
        'vat': 'vat',
        'emails': 'emails',
        'template': 'template',
        'alphabetical_order': 'alphabetical_order'
    }

    def __init__(self, agent_vanzari=None, agent_fax=None, agent_phone1=None, agent_phone2=None, location=None, company_phones=None, location_detail=None, adaos=None, category=None, discount=None, partner=None, include_image=False, include_stock=False, vat=False, emails=None, template=None, alphabetical_order=True, _configuration=None):  # noqa: E501
        """ProductOffer - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._agent_vanzari = None
        self._agent_fax = None
        self._agent_phone1 = None
        self._agent_phone2 = None
        self._location = None
        self._company_phones = None
        self._location_detail = None
        self._adaos = None
        self._category = None
        self._discount = None
        self._partner = None
        self._include_image = None
        self._include_stock = None
        self._vat = None
        self._emails = None
        self._template = None
        self._alphabetical_order = None
        self.discriminator = None

        if agent_vanzari is not None:
            self.agent_vanzari = agent_vanzari
        if agent_fax is not None:
            self.agent_fax = agent_fax
        if agent_phone1 is not None:
            self.agent_phone1 = agent_phone1
        if agent_phone2 is not None:
            self.agent_phone2 = agent_phone2
        if location is not None:
            self.location = location
        if company_phones is not None:
            self.company_phones = company_phones
        if location_detail is not None:
            self.location_detail = location_detail
        if adaos is not None:
            self.adaos = adaos
        self.category = category
        if discount is not None:
            self.discount = discount
        if partner is not None:
            self.partner = partner
        if include_image is not None:
            self.include_image = include_image
        if include_stock is not None:
            self.include_stock = include_stock
        if vat is not None:
            self.vat = vat
        if emails is not None:
            self.emails = emails
        if template is not None:
            self.template = template
        if alphabetical_order is not None:
            self.alphabetical_order = alphabetical_order

    @property
    def agent_vanzari(self):
        """Gets the agent_vanzari of this ProductOffer.  # noqa: E501


        :return: The agent_vanzari of this ProductOffer.  # noqa: E501
        :rtype: str
        """
        return self._agent_vanzari

    @agent_vanzari.setter
    def agent_vanzari(self, agent_vanzari):
        """Sets the agent_vanzari of this ProductOffer.


        :param agent_vanzari: The agent_vanzari of this ProductOffer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                agent_vanzari is not None and len(agent_vanzari) < 1):
            raise ValueError("Invalid value for `agent_vanzari`, length must be greater than or equal to `1`")  # noqa: E501

        self._agent_vanzari = agent_vanzari

    @property
    def agent_fax(self):
        """Gets the agent_fax of this ProductOffer.  # noqa: E501


        :return: The agent_fax of this ProductOffer.  # noqa: E501
        :rtype: str
        """
        return self._agent_fax

    @agent_fax.setter
    def agent_fax(self, agent_fax):
        """Sets the agent_fax of this ProductOffer.


        :param agent_fax: The agent_fax of this ProductOffer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                agent_fax is not None and len(agent_fax) < 1):
            raise ValueError("Invalid value for `agent_fax`, length must be greater than or equal to `1`")  # noqa: E501

        self._agent_fax = agent_fax

    @property
    def agent_phone1(self):
        """Gets the agent_phone1 of this ProductOffer.  # noqa: E501


        :return: The agent_phone1 of this ProductOffer.  # noqa: E501
        :rtype: str
        """
        return self._agent_phone1

    @agent_phone1.setter
    def agent_phone1(self, agent_phone1):
        """Sets the agent_phone1 of this ProductOffer.


        :param agent_phone1: The agent_phone1 of this ProductOffer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                agent_phone1 is not None and len(agent_phone1) < 1):
            raise ValueError("Invalid value for `agent_phone1`, length must be greater than or equal to `1`")  # noqa: E501

        self._agent_phone1 = agent_phone1

    @property
    def agent_phone2(self):
        """Gets the agent_phone2 of this ProductOffer.  # noqa: E501


        :return: The agent_phone2 of this ProductOffer.  # noqa: E501
        :rtype: str
        """
        return self._agent_phone2

    @agent_phone2.setter
    def agent_phone2(self, agent_phone2):
        """Sets the agent_phone2 of this ProductOffer.


        :param agent_phone2: The agent_phone2 of this ProductOffer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                agent_phone2 is not None and len(agent_phone2) < 1):
            raise ValueError("Invalid value for `agent_phone2`, length must be greater than or equal to `1`")  # noqa: E501

        self._agent_phone2 = agent_phone2

    @property
    def location(self):
        """Gets the location of this ProductOffer.  # noqa: E501


        :return: The location of this ProductOffer.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ProductOffer.


        :param location: The location of this ProductOffer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                location is not None and len(location) < 1):
            raise ValueError("Invalid value for `location`, length must be greater than or equal to `1`")  # noqa: E501

        self._location = location

    @property
    def company_phones(self):
        """Gets the company_phones of this ProductOffer.  # noqa: E501


        :return: The company_phones of this ProductOffer.  # noqa: E501
        :rtype: str
        """
        return self._company_phones

    @company_phones.setter
    def company_phones(self, company_phones):
        """Sets the company_phones of this ProductOffer.


        :param company_phones: The company_phones of this ProductOffer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                company_phones is not None and len(company_phones) < 1):
            raise ValueError("Invalid value for `company_phones`, length must be greater than or equal to `1`")  # noqa: E501

        self._company_phones = company_phones

    @property
    def location_detail(self):
        """Gets the location_detail of this ProductOffer.  # noqa: E501


        :return: The location_detail of this ProductOffer.  # noqa: E501
        :rtype: str
        """
        return self._location_detail

    @location_detail.setter
    def location_detail(self, location_detail):
        """Sets the location_detail of this ProductOffer.


        :param location_detail: The location_detail of this ProductOffer.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                location_detail is not None and len(location_detail) < 1):
            raise ValueError("Invalid value for `location_detail`, length must be greater than or equal to `1`")  # noqa: E501

        self._location_detail = location_detail

    @property
    def adaos(self):
        """Gets the adaos of this ProductOffer.  # noqa: E501


        :return: The adaos of this ProductOffer.  # noqa: E501
        :rtype: int
        """
        return self._adaos

    @adaos.setter
    def adaos(self, adaos):
        """Sets the adaos of this ProductOffer.


        :param adaos: The adaos of this ProductOffer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                adaos is not None and adaos < 0):  # noqa: E501
            raise ValueError("Invalid value for `adaos`, must be a value greater than or equal to `0`")  # noqa: E501

        self._adaos = adaos

    @property
    def category(self):
        """Gets the category of this ProductOffer.  # noqa: E501


        :return: The category of this ProductOffer.  # noqa: E501
        :rtype: int
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ProductOffer.


        :param category: The category of this ProductOffer.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and category is None:
            raise ValueError("Invalid value for `category`, must not be `None`")  # noqa: E501

        self._category = category

    @property
    def discount(self):
        """Gets the discount of this ProductOffer.  # noqa: E501


        :return: The discount of this ProductOffer.  # noqa: E501
        :rtype: int
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this ProductOffer.


        :param discount: The discount of this ProductOffer.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                discount is not None and discount > 100):  # noqa: E501
            raise ValueError("Invalid value for `discount`, must be a value less than or equal to `100`")  # noqa: E501
        if (self._configuration.client_side_validation and
                discount is not None and discount < 0):  # noqa: E501
            raise ValueError("Invalid value for `discount`, must be a value greater than or equal to `0`")  # noqa: E501

        self._discount = discount

    @property
    def partner(self):
        """Gets the partner of this ProductOffer.  # noqa: E501


        :return: The partner of this ProductOffer.  # noqa: E501
        :rtype: int
        """
        return self._partner

    @partner.setter
    def partner(self, partner):
        """Sets the partner of this ProductOffer.


        :param partner: The partner of this ProductOffer.  # noqa: E501
        :type: int
        """

        self._partner = partner

    @property
    def include_image(self):
        """Gets the include_image of this ProductOffer.  # noqa: E501


        :return: The include_image of this ProductOffer.  # noqa: E501
        :rtype: bool
        """
        return self._include_image

    @include_image.setter
    def include_image(self, include_image):
        """Sets the include_image of this ProductOffer.


        :param include_image: The include_image of this ProductOffer.  # noqa: E501
        :type: bool
        """

        self._include_image = include_image

    @property
    def include_stock(self):
        """Gets the include_stock of this ProductOffer.  # noqa: E501


        :return: The include_stock of this ProductOffer.  # noqa: E501
        :rtype: bool
        """
        return self._include_stock

    @include_stock.setter
    def include_stock(self, include_stock):
        """Sets the include_stock of this ProductOffer.


        :param include_stock: The include_stock of this ProductOffer.  # noqa: E501
        :type: bool
        """

        self._include_stock = include_stock

    @property
    def vat(self):
        """Gets the vat of this ProductOffer.  # noqa: E501


        :return: The vat of this ProductOffer.  # noqa: E501
        :rtype: bool
        """
        return self._vat

    @vat.setter
    def vat(self, vat):
        """Sets the vat of this ProductOffer.


        :param vat: The vat of this ProductOffer.  # noqa: E501
        :type: bool
        """

        self._vat = vat

    @property
    def emails(self):
        """Gets the emails of this ProductOffer.  # noqa: E501

          # noqa: E501

        :return: The emails of this ProductOffer.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this ProductOffer.

          # noqa: E501

        :param emails: The emails of this ProductOffer.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def template(self):
        """Gets the template of this ProductOffer.  # noqa: E501


        :return: The template of this ProductOffer.  # noqa: E501
        :rtype: int
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this ProductOffer.


        :param template: The template of this ProductOffer.  # noqa: E501
        :type: int
        """

        self._template = template

    @property
    def alphabetical_order(self):
        """Gets the alphabetical_order of this ProductOffer.  # noqa: E501


        :return: The alphabetical_order of this ProductOffer.  # noqa: E501
        :rtype: bool
        """
        return self._alphabetical_order

    @alphabetical_order.setter
    def alphabetical_order(self, alphabetical_order):
        """Sets the alphabetical_order of this ProductOffer.


        :param alphabetical_order: The alphabetical_order of this ProductOffer.  # noqa: E501
        :type: bool
        """

        self._alphabetical_order = alphabetical_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProductOffer, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductOffer):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductOffer):
            return True

        return self.to_dict() != other.to_dict()
