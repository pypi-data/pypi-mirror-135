"""This library allows you to write and save files to the users folder. Useful for when you convert this script to a onefile exe program."""
import os

class User():
    def __init__(self,id):
        """Will create the file path inside the Users folder. Your id should be a unique string just for your script."""
        R = os.path.join(os.path.expanduser('~'), '.python')
        self.path = os.path.join(R,id+'\\')
        if os.path.isdir(self.path) == False:
            os.makedirs(self.path)
            w=open(R+'/README.txt','w')
            w.write('This directory has been auto generated by scripts using user.py. The directory contains files that are required for this script.')
            w.close()

    def uninstall(self):
        """
        Will delete the scripts user folder.

        Returns
        ---
        `True` - Successfully deleted the scripts user folder.

        `False` - Failed to delete the scripts user folder, A file is still being prossessed.
        """
        try: 
            for filename in self.list():
                os.remove(self.path+filename)
            os.rmdir(self.path)
            return True
        except: return False
    
    def exists(self,filename):
        """
        Checks if the file exists inside the scripts user folder.

        Returns
        ---
        `True` - The file exists.

        `False` - The file does not exist.
        """
        try:
            if os.path.isfile(self.path+filename): return True
            else: return False
        except: return False

    def open(self,filename,mode='r'):
        """
        Opens the file that is in the scripts user folder.

        Returns
        ---
        TextIOWrapper - The contents of the file.

        `None` - Could not find the file.
        """
        try: return open(self.path+filename,mode)
        except: return None

    def list(self):
        """
        Returns a list of all files that are in the scripts users folder.

        Returns
        ---
        list[str] - A list of all files that are currently inside the scripts user folder.

        `None` - Failed to list the directory
        """
        try: return os.listdir(self.path)
        except: return None

    def show(self,filename=None):
        """
        Opens the file in your devices default editor. If filename is undefined it will open the scripts user folder.

        Returns
        ---
        `True` - Successfully showed the file or folder.

        `False` - Failed to show file or folder.
        """
        try:
            if filename!=None:
                os.startfile(self.path+filename)
                return True
            else:
                os.startfile(self.path)
                return True
        except: return False

    def get(self):
        """Returns the full path of the scripts user folder."""
        return self.path

if __name__ == '__main__':
    import json

    # Initlize user
    user = User('__test__') # replace __test__ with a unique name / UUID for your project.
    # Open user folder
    # user.show()

    # check if file exsists
    if user.exists('config.json'):
        # open file in read mode
        opn = user.open('config.json','r')
        # convert to dict
        config = json.loads(opn.read())
        # close
        opn.close()
        # Print last saved value
        print('Current value: ' + config['value'])
    else:
        # Use default config
        config = {'value':'Hello World'}
        # Print current value
        print('Current value: ' + config['value'])

    # Update value
    config['value'] = input('Enter new value: ')

    # SAVE FILE
    # open file in write mode
    w = user.open('config.json','w')
    # convert dict to str
    obj = json.dumps(config,indent=4)
    # write to file
    w.write(obj)
    # close file
    w.close()
