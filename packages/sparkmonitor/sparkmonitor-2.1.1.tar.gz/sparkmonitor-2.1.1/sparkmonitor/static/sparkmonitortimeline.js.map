{"version":3,"file":"sparkmonitortimeline.js","mappings":"iMASMA,EAAmC,CACrCC,OAAQ,CACJC,KAAM,EACNC,KAAM,GAEVC,OAAO,EACPC,cAAc,EACdC,UAAW,QACXC,UAAU,EACVC,QAAS,CACLC,eAAgB,OAEpBC,MAAO,SACPC,YAAa,MACbC,gBAAgB,GAiEpB,SA9DiBC,EAAAA,EAAAA,KAAS,WACtB,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAOC,EAAAA,EAAAA,MAEPC,EAAcC,EAAAA,OAA6B,MAE3CC,EAAe,GACrBJ,EAAKK,KAAKC,SAAQ,SAACC,GACfH,EAAaI,KAAK,CACdC,GAAIF,EAAIG,SACRC,MAAOJ,EAAIK,UACXC,QAAS,GAAF,OAAKN,EAAIO,MAAT,YAAkBP,EAAIQ,MAC7BC,MAAO,OACPC,UAAW,OAASV,EAAIW,OACxBC,KAAqB,YAAfZ,EAAIW,OAAuB,UAAY,OAC7CE,IAAKb,EAAIc,QAAUd,EAAIc,QAAU,IAAIC,OAEzCf,EAAIgB,eAAejB,SAAQ,SAACkB,GACxB,IAAMC,EAAQ3B,EAAS4B,OAAOF,GAC1BC,EAAME,gBACNvB,EAAaI,KAAK,CACdC,GAAIgB,EAAMf,SACVC,MAAOc,EAAME,eACbd,QAAS,GAAF,OAAKY,EAAMG,QAAX,YAAsBH,EAAMV,MACnCC,MAAO,SACPC,UAAW,SAAWQ,EAAMP,OAC5BC,KAAuB,YAAjBM,EAAMP,OAAuB,UAAY,OAC/CE,IAAKK,EAAMI,eAAiBJ,EAAMI,eAAiB,IAAIP,aAMvE,IAAMQ,EAAiB,IAAIC,EAAAA,GAAQ,CAC/B,CACItB,GAAI,OACJI,QAAS,OACTI,UAAW,eAEf,CAAER,GAAI,SAAUI,QAAS,YAY7B,OATAV,EAAAA,WAAgB,WACZ,GAAKD,EAAY8B,QAAjB,CAGA,IAAMC,EAAW,IAAIC,EAAAA,GAAYhC,EAAY8B,QAAS5B,EAAc0B,EAAgB9C,GACpF,OAAO,WACHiD,EAASE,eAIb,gBAAC,IAAD,KACI,uBAAKlB,UAAU,cACX,uBAAKA,UAAU,8BACX,uBAAKmB,IAAKlC","sources":["webpack://sparkmonitor/./src/components/timeline.tsx"],"sourcesContent":["import { observer } from 'mobx-react-lite';\nimport React from 'react';\n\nimport { DataSet, Timeline as VisTimeline, TimelineOptions } from 'vis-timeline/standalone';\nimport 'vis-timeline/styles/vis-timeline-graph2d.css';\n\nimport { useCellStore, useNotebookStore } from '../store';\nimport { ErrorBoundary } from './error-boundary';\n\nconst timelineOptions: TimelineOptions = {\n    margin: {\n        item: 2,\n        axis: 2,\n    },\n    stack: true,\n    showTooltips: true,\n    minHeight: '100px',\n    editable: false,\n    tooltip: {\n        overflowMethod: 'cap',\n    },\n    align: 'center',\n    orientation: 'top',\n    verticalScroll: false,\n};\n\nconst Timeline = observer(() => {\n    const notebook = useNotebookStore();\n    const cell = useCellStore();\n\n    const timelineDiv = React.useRef<HTMLDivElement>(null);\n\n    const timelineData = [] as any[];\n    cell.jobs.forEach((job) => {\n        timelineData.push({\n            id: job.uniqueId,\n            start: job.startTime,\n            content: `${job.jobId}:${job.name}`,\n            group: 'jobs',\n            className: 'job ' + job.status,\n            mode: job.status === 'RUNNING' ? 'ongoing' : 'done',\n            end: job.endTime ? job.endTime : new Date(),\n        });\n        job.uniqueStageIds.forEach((uniqueStageId) => {\n            const stage = notebook.stages[uniqueStageId];\n            if (stage.submissionTime) {\n                timelineData.push({\n                    id: stage.uniqueId,\n                    start: stage.submissionTime,\n                    content: `${stage.stageId}:${stage.name}`,\n                    group: 'stages',\n                    className: 'stage ' + stage.status,\n                    mode: stage.status === 'RUNNING' ? 'ongoing' : 'done',\n                    end: stage.completionTime ? stage.completionTime : new Date(),\n                });\n            }\n        });\n    });\n\n    const timelineGroups = new DataSet([\n        {\n            id: 'jobs',\n            content: 'Jobs',\n            className: 'visjobgroup',\n        },\n        { id: 'stages', content: 'Stages' },\n    ]);\n\n    React.useEffect(() => {\n        if (!timelineDiv.current) {\n            return;\n        }\n        const timeline = new VisTimeline(timelineDiv.current, timelineData, timelineGroups, timelineOptions);\n        return () => {\n            timeline.destroy();\n        };\n    });\n    return (\n        <ErrorBoundary>\n            <div className=\"tabcontent\">\n                <div className=\"timelinewrapper hidephases\">\n                    <div ref={timelineDiv}></div>\n                </div>\n            </div>\n        </ErrorBoundary>\n    );\n});\n\nexport default Timeline;\n"],"names":["timelineOptions","margin","item","axis","stack","showTooltips","minHeight","editable","tooltip","overflowMethod","align","orientation","verticalScroll","observer","notebook","useNotebookStore","cell","useCellStore","timelineDiv","React","timelineData","jobs","forEach","job","push","id","uniqueId","start","startTime","content","jobId","name","group","className","status","mode","end","endTime","Date","uniqueStageIds","uniqueStageId","stage","stages","submissionTime","stageId","completionTime","timelineGroups","DataSet","current","timeline","VisTimeline","destroy","ref"],"sourceRoot":""}