{"version":3,"file":"sparkmonitortaskchart.js","mappings":"2+BAOA,IAAMA,GAAOC,EAAAA,EAAAA,GAAsBC,KAE7BC,EAA4C,CAC9CC,YAAY,EACZC,OAAQ,CACJC,EAAG,GACHC,EAAG,GACHC,EAAG,GACHC,EAAG,IAEPC,MAAO,CACHC,KAAM,QAGVC,MAAO,CACHC,YAAY,GAEhBC,SAAU,MACVC,OAAQ,GACRC,OAAQ,CACJC,YAAa,IACbC,EAAG,EACHC,EAAG,EAEHC,KAAM,CACFC,OAAQ,aACRC,KAAM,GACNC,MAAO,UAQbC,EAAc,CAAEC,aAAa,EAAOC,YAAY,GAoGtD,SAlGkBC,EAAAA,EAAAA,KAAS,WACvB,I,IACMC,GADOC,EAAAA,EAAAA,MACeD,eAE5B,G,EAA4CE,EAAAA,SAAe,G,EAA3D,E,8zBAAOC,EAAP,KAA6BC,EAA7B,KAEMC,EAAOH,EAAAA,SAAc,WACvB,IAAMI,EAAyB,CAC3BhB,EAAGU,EAAeO,UAClBhB,EAAGS,EAAeQ,UAClBC,KAAM,UACN1B,KAAM,UACN2B,KAAM,OACNC,UAAW,UACXC,KAAM,gBA0BV,MAAO,CAxB4B,CAC/BtB,EAAGU,EAAea,cAClBtB,EAAGS,EAAec,cAClBL,KAAM,UACN1B,KAAM,UACN2B,KAAM,OACNC,UAAW,UACXC,KAAM,kBAiBaN,EAfO,CAC1BhB,EAAGU,EAAee,SAClBxB,EAAGS,EAAegB,SAClBC,KAAMjB,EAAekB,YACrBnC,KAAM,UACN2B,KAAM,UACNC,UAAW,UAEXnC,YAAY,EACZ2C,OAAQ,CACJC,OAAQ,GACRzB,MAAO,UACPD,KAAM,OAIf,CACCM,EAAeO,UACfP,EAAeQ,UACfR,EAAea,cACfb,EAAec,cACfd,EAAee,SACff,EAAegB,SACfhB,EAAekB,cAGbG,EAAqCnB,EAAAA,SAAc,WACrD,cACO3B,GADP,IAEIY,OAAQa,EAAee,SAASO,KAAI,SAACC,GACjC,MAAO,CACHxC,KAAM,OACNyC,KAAM,QACNC,GAAIF,EACJG,GAAI,EACJC,GAAIJ,EACJK,GAAI,EACJC,KAAM,CACFlC,MAAO,UACPmC,MAAO,SAInBC,aAAc5B,MAEnB,CAACH,EAAee,SAAUZ,IAa7B,OAVAD,EAAAA,WAAgB,WACZ,IAAM8B,EAAkBC,aAAY,WAChC7B,GAAY,SAAC8B,GAAD,OAAcA,EAAW,OACtC,KACH,OAAO,WAEHC,cAAcH,OAKlB,gBAAC,IAAD,KACI,uBAAKI,UAAU,cACX,gBAAChE,EAAD,CACIiE,OAAQhB,EACRhB,KAAMA,EACNiC,OAAQ1C,EACR2C,kBAAkB,EAClBC,MAAO,CAAEV,MAAO,OAAQW,OAAQ,QAChCP,SAAU/B","sources":["webpack://sparkmonitor/./src/components/task-chart.tsx"],"sourcesContent":["import React from 'react';\nimport Plotly from 'plotly.js-basic-dist';\nimport { observer } from 'mobx-react-lite';\nimport { useCellStore } from '../store';\n\nimport createPlotlyComponent from 'react-plotly.js/factory';\nimport { ErrorBoundary } from './error-boundary';\nconst Plot = createPlotlyComponent(Plotly);\n\nconst plotDefaultLayout: Partial<Plotly.Layout> = {\n    showlegend: true,\n    margin: {\n        t: 30, // top margin\n        l: 30, // left margin\n        r: 30, // right margin\n        b: 60, // bottom margin\n    },\n    xaxis: {\n        type: 'date',\n        // title: 'Time',\n    },\n    yaxis: {\n        fixedrange: true,\n    },\n    dragmode: 'pan',\n    shapes: [],\n    legend: {\n        orientation: 'h',\n        x: 0,\n        y: 5,\n        // traceorder: 'normal',\n        font: {\n            family: 'sans-serif',\n            size: 12,\n            color: '#000',\n        },\n        // bgcolor: '#E2E2E2',\n        // bordercolor: '#FFFFFF',\n        // borderwidth: 2\n    },\n};\n\nconst plotOptions = { displaylogo: false, scrollZoom: true };\n\nconst TaskChart = observer(() => {\n    const cell = useCellStore();\n    const taskChartStore = cell.taskChartStore;\n\n    const [chartRefreshRevision, setRevision] = React.useState(1);\n\n    const data = React.useMemo(() => {\n        const tasktrace: Plotly.Data = {\n            x: taskChartStore.taskDataX,\n            y: taskChartStore.taskDataY,\n            fill: 'tozeroy',\n            type: 'scatter',\n            mode: 'none',\n            fillcolor: '#00aedb',\n            name: 'Active Tasks',\n        };\n        const executortrace: Plotly.Data = {\n            x: taskChartStore.executorDataX,\n            y: taskChartStore.executorDataY,\n            fill: 'tozeroy',\n            type: 'scatter',\n            mode: 'none',\n            fillcolor: '#F5C936',\n            name: 'Executor Cores',\n        };\n        const jobtrace: Plotly.Data = {\n            x: taskChartStore.jobDataX,\n            y: taskChartStore.jobDataY,\n            text: taskChartStore.jobDataText as any, //this.jobDataText,\n            type: 'scatter',\n            mode: 'markers',\n            fillcolor: '#F5C936',\n            // name: 'Jobs',\n            showlegend: false,\n            marker: {\n                symbol: 23,\n                color: '#4CB5AE',\n                size: 1,\n            },\n        };\n        return [executortrace, tasktrace, jobtrace];\n    }, [\n        taskChartStore.taskDataX,\n        taskChartStore.taskDataY,\n        taskChartStore.executorDataX,\n        taskChartStore.executorDataY,\n        taskChartStore.jobDataX,\n        taskChartStore.jobDataY,\n        taskChartStore.jobDataText,\n    ]);\n\n    const plotLayout: Partial<Plotly.Layout> = React.useMemo(() => {\n        return {\n            ...plotDefaultLayout,\n            shapes: taskChartStore.jobDataX.map((job) => {\n                return {\n                    type: 'line',\n                    yref: 'paper',\n                    x0: job,\n                    y0: 0,\n                    x1: job,\n                    y1: 1,\n                    line: {\n                        color: '#4CB5AE',\n                        width: 1.5,\n                    },\n                };\n            }),\n            datarevision: chartRefreshRevision,\n        };\n    }, [taskChartStore.jobDataX, chartRefreshRevision]);\n\n    // Periodically refresh the chart by updating the revision\n    React.useEffect(() => {\n        const refreshInterval = setInterval(() => {\n            setRevision((revision) => revision + 1);\n        }, 2000);\n        return () => {\n            // clean up when react component is unmounted.\n            clearInterval(refreshInterval);\n        };\n    });\n\n    return (\n        <ErrorBoundary>\n            <div className=\"tabcontent\">\n                <Plot\n                    layout={plotLayout}\n                    data={data}\n                    config={plotOptions}\n                    useResizeHandler={true}\n                    style={{ width: '100%', height: '100%' }}\n                    revision={chartRefreshRevision}\n                />\n            </div>\n        </ErrorBoundary>\n    );\n});\nexport default TaskChart;\n"],"names":["Plot","createPlotlyComponent","Plotly","plotDefaultLayout","showlegend","margin","t","l","r","b","xaxis","type","yaxis","fixedrange","dragmode","shapes","legend","orientation","x","y","font","family","size","color","plotOptions","displaylogo","scrollZoom","observer","taskChartStore","useCellStore","React","chartRefreshRevision","setRevision","data","tasktrace","taskDataX","taskDataY","fill","mode","fillcolor","name","executorDataX","executorDataY","jobDataX","jobDataY","text","jobDataText","marker","symbol","plotLayout","map","job","yref","x0","y0","x1","y1","line","width","datarevision","refreshInterval","setInterval","revision","clearInterval","className","layout","config","useResizeHandler","style","height"],"sourceRoot":""}