import ctypes
from . imgui_enum import *
from typing import Any, Union, Tuple


def iterate(data: ctypes.c_void_p, t: Type[ctypes.Structure], count: int)->Iterable[ctypes.Structure]:
    p = ctypes.cast(data, ctypes.POINTER(t))
    for i in range(count):
        yield p[i]


class ImVector(ctypes.Structure):
    _fields_ = (
        ('Size', ctypes.c_int),
        ('Capacity', ctypes.c_int),
        ('Data', ctypes.c_void_p),
    )

    def each(self, t: Type[ctypes.Structure])->Iterable[ctypes.Structure]:
        return iterate(self.Data, t, self.Size)

class ImVec2(ctypes.Structure):
    x: ctypes.c_float # FloatType: float
    y: ctypes.c_float # FloatType: float

    def __iter__(self): ...
class ImVec4(ctypes.Structure):
    x: ctypes.c_float # FloatType: float
    y: ctypes.c_float # FloatType: float
    z: ctypes.c_float # FloatType: float
    w: ctypes.c_float # FloatType: float

    def __iter__(self): ...
class ImFont(ctypes.Structure):
    pass

class ImFontConfig(ctypes.Structure):
    FontData: ctypes.Array # PointerType: void*
    FontDataSize: ctypes.c_int32 # Int32Type: int
    FontDataOwnedByAtlas: ctypes.c_bool # BoolType: bool
    FontNo: ctypes.c_int32 # Int32Type: int
    SizePixels: ctypes.c_float # FloatType: float
    OversampleH: ctypes.c_int32 # Int32Type: int
    OversampleV: ctypes.c_int32 # Int32Type: int
    PixelSnapH: ctypes.c_bool # BoolType: bool
    GlyphExtraSpacing: ImVec2 # ImVec2WrapType: ImVec2
    GlyphOffset: ImVec2 # ImVec2WrapType: ImVec2
    GlyphRanges: ctypes.Array # PointerType: unsigned short*
    GlyphMinAdvanceX: ctypes.c_float # FloatType: float
    GlyphMaxAdvanceX: ctypes.c_float # FloatType: float
    MergeMode: ctypes.c_bool # BoolType: bool
    FontBuilderFlags: ctypes.c_uint32 # UInt32Type: unsigned int
    RasterizerMultiply: ctypes.c_float # FloatType: float
    EllipsisChar: ctypes.c_uint16 # UInt16Type: unsigned short
    Name: ctypes.c_int8 * 40 # ArrayType: char[40]
    DstFont: ImFont # PointerToStructType: ImFont*

class ImFontAtlasCustomRect(ctypes.Structure):
    Width: ctypes.c_uint16 # UInt16Type: unsigned short
    Height: ctypes.c_uint16 # UInt16Type: unsigned short
    X: ctypes.c_uint16 # UInt16Type: unsigned short
    Y: ctypes.c_uint16 # UInt16Type: unsigned short
    GlyphID: ctypes.c_uint32 # UInt32Type: unsigned int
    GlyphAdvanceX: ctypes.c_float # FloatType: float
    GlyphOffset: ImVec2 # ImVec2WrapType: ImVec2
    Font: ImFont # PointerToStructType: ImFont*

class ImFontAtlas(ctypes.Structure):
    Flags: ctypes.c_int32 # Int32Type: int
    TexID: ctypes.Array # PointerType: void*
    TexDesiredWidth: ctypes.c_int32 # Int32Type: int
    TexGlyphPadding: ctypes.c_int32 # Int32Type: int
    Locked: ctypes.c_bool # BoolType: bool
    TexReady: ctypes.c_bool # BoolType: bool
    TexPixelsUseColors: ctypes.c_bool # BoolType: bool
    TexPixelsAlpha8: ctypes.Array # PointerType: unsigned char*
    TexPixelsRGBA32: ctypes.Array # PointerType: unsigned int*
    TexWidth: ctypes.c_int32 # Int32Type: int
    TexHeight: ctypes.c_int32 # Int32Type: int
    TexUvScale: ImVec2 # ImVec2WrapType: ImVec2
    TexUvWhitePixel: ImVec2 # ImVec2WrapType: ImVec2
    Fonts: ImVector # ImVector: ImVector
    CustomRects: ImVector # ImVector: ImVector
    ConfigData: ImVector # ImVector: ImVector
    TexUvLines: ImVec4 * 64 # ArrayType: ImVec4[64]
    FontBuilderIO: ctypes.Array # PointerType: ImFontBuilderIO*
    FontBuilderFlags: ctypes.c_uint32 # UInt32Type: unsigned int
    PackIdMouseCursors: ctypes.c_int32 # Int32Type: int
    PackIdLines: ctypes.c_int32 # Int32Type: int

    def AddFont(self, font_cfg: ImFontConfig<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F34F5FE40>, cursor=<clang.cindex.Cursor object at 0x0000014F32ABFF40>, namespace='tinygizmo::')>)->ImFont: ...
    def AddFontDefault(self, font_cfg: ImFontConfig<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F37B45440>, cursor=<clang.cindex.Cursor object at 0x0000014F32ABFF40>, namespace='tinygizmo::')>)->ImFont: ...
    def AddFontFromFileTTF(self, filename: Union[bytes, str]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FA40>, cursor=<clang.cindex.Cursor object at 0x0000014F32ABFF40>, namespace='tinygizmo::')>, size_pixels: float<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4EF40>, cursor=<clang.cindex.Cursor object at 0x0000014F34F5FE40>, namespace='tinygizmo::')>, font_cfg: ImFontConfig<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4F140>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4FD40>, namespace='tinygizmo::')>, glyph_ranges: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FDC0>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4FF40>, namespace='tinygizmo::')>)->ImFont: ...
    def AddFontFromMemoryTTF(self, font_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FD40>, cursor=<clang.cindex.Cursor object at 0x0000014F34F5FE40>, namespace='tinygizmo::')>, font_size: int<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FDC0>, cursor=<clang.cindex.Cursor object at 0x0000014F37B45440>, namespace='tinygizmo::')>, size_pixels: float<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FF40>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4FA40>, namespace='tinygizmo::')>, font_cfg: ImFontConfig<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4F4C0>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4EF40>, namespace='tinygizmo::')>, glyph_ranges: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F440C0>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4F140>, namespace='tinygizmo::')>)->ImFont: ...
    def AddFontFromMemoryCompressedTTF(self, compressed_font_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4F4C0>, cursor=<clang.cindex.Cursor object at 0x0000014F37B45440>, namespace='tinygizmo::')>, compressed_font_size: int<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4EF40>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4FD40>, namespace='tinygizmo::')>, size_pixels: float<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4F140>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4FDC0>, namespace='tinygizmo::')>, font_cfg: ImFontConfig<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F32ABFF40>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4FF40>, namespace='tinygizmo::')>, glyph_ranges: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F44DC0>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4FA40>, namespace='tinygizmo::')>)->ImFont: ...
    def AddFontFromMemoryCompressedBase85TTF(self, compressed_font_data_base85: Union[bytes, str]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4F140>, cursor=<clang.cindex.Cursor object at 0x0000014F32ABFF40>, namespace='tinygizmo::')>, size_pixels: float<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FDC0>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4F4C0>, namespace='tinygizmo::')>, font_cfg: ImFontConfig<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FF40>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4EF40>, namespace='tinygizmo::')>, glyph_ranges: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FA40>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4FD40>, namespace='tinygizmo::')>)->ImFont: ...
    def ClearInputData(self)->None: ...
    def ClearTexData(self)->None: ...
    def ClearFonts(self)->None: ...
    def Clear(self)->None: ...
    def Build(self)->bool: ...
    def GetTexDataAsAlpha8(self, out_pixels: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FF40>, cursor=<clang.cindex.Cursor object at 0x0000014F32ABFF40>, namespace='tinygizmo::')>, out_width: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4EF40>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4F140>, namespace='tinygizmo::')>, out_height: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FA40>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4FDC0>, namespace='tinygizmo::')>, out_bytes_per_pixel: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FD40>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4F4C0>, namespace='tinygizmo::')>)->None: ...
    def GetTexDataAsRGBA32(self, out_pixels: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FA40>, cursor=<clang.cindex.Cursor object at 0x0000014F32ABFF40>, namespace='tinygizmo::')>, out_width: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FDC0>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4FF40>, namespace='tinygizmo::')>, out_height: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FD40>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4EF40>, namespace='tinygizmo::')>, out_bytes_per_pixel: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4F4C0>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4F140>, namespace='tinygizmo::')>)->None: ...
    def IsBuilt(self)->bool: ...
    def SetTexID(self, _id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FA40>, cursor=<clang.cindex.Cursor object at 0x0000014F32ABFF40>, namespace='tinygizmo::')>)->None: ...
    def GetGlyphRangesDefault(self)->ctypes.c_void_p: ...
    def GetGlyphRangesKorean(self)->ctypes.c_void_p: ...
    def GetGlyphRangesJapanese(self)->ctypes.c_void_p: ...
    def GetGlyphRangesChineseFull(self)->ctypes.c_void_p: ...
    def GetGlyphRangesChineseSimplifiedCommon(self)->ctypes.c_void_p: ...
    def GetGlyphRangesCyrillic(self)->ctypes.c_void_p: ...
    def GetGlyphRangesThai(self)->ctypes.c_void_p: ...
    def GetGlyphRangesVietnamese(self)->ctypes.c_void_p: ...
    def AddCustomRectRegular(self, width: int<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FA40>, cursor=<clang.cindex.Cursor object at 0x0000014F32ABFF40>, namespace='tinygizmo::')>, height: int<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FD40>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4F4C0>, namespace='tinygizmo::')>)->int: ...
    def AddCustomRectFontGlyph(self, font: ImFont<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4F140>, cursor=<clang.cindex.Cursor object at 0x0000014F32ABFF40>, namespace='tinygizmo::')>, _id: int<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F32783340>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4FA40>, namespace='tinygizmo::')>, width: int<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F37B45440>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4FD40>, namespace='tinygizmo::')>, height: int<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F34F5FE40>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4F4C0>, namespace='tinygizmo::')>, advance_x: float<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F448C0>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4FF40>, namespace='tinygizmo::')>, offset: Union[ImVec2, Tuple[float, float]]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F459C0>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4EF40>, namespace='tinygizmo::')>)->int: ...
    def GetCustomRectByIndex(self, index: int<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F37B45440>, cursor=<clang.cindex.Cursor object at 0x0000014F32783340>, namespace='tinygizmo::')>)->ImFontAtlasCustomRect: ...
    def CalcCustomRectUV(self, rect: ImFontAtlasCustomRect<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F34F5FE40>, cursor=<clang.cindex.Cursor object at 0x0000014F37B45440>, namespace='tinygizmo::')>, out_uv_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4F140>, cursor=<clang.cindex.Cursor object at 0x0000014F32783340>, namespace='tinygizmo::')>, out_uv_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FA40>, cursor=<clang.cindex.Cursor object at 0x0000014F32ABFF40>, namespace='tinygizmo::')>)->None: ...
    def GetMouseCursorTexData(self, cursor: int<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FA40>, cursor=<clang.cindex.Cursor object at 0x0000014F34F5FE40>, namespace='tinygizmo::')>, out_offset: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FF40>, cursor=<clang.cindex.Cursor object at 0x0000014F37B45440>, namespace='tinygizmo::')>, out_size: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4FD40>, cursor=<clang.cindex.Cursor object at 0x0000014F32783340>, namespace='tinygizmo::')>, out_uv_border: ctypes.Array<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4F4C0>, cursor=<clang.cindex.Cursor object at 0x0000014F32ABFF40>, namespace='tinygizmo::')>, out_uv_fill: ctypes.Array<bound method TypeWrap.default_value of TypeWrap(type=<clang.cindex.Type object at 0x0000014F36F4EF40>, cursor=<clang.cindex.Cursor object at 0x0000014F36F4F140>, namespace='tinygizmo::')>)->bool: ...
class ImGuiIO(ctypes.Structure):
    ConfigFlags: ctypes.c_int32 # Int32Type: int
    BackendFlags: ctypes.c_int32 # Int32Type: int
    DisplaySize: ImVec2 # ImVec2WrapType: ImVec2
    DeltaTime: ctypes.c_float # FloatType: float
    IniSavingRate: ctypes.c_float # FloatType: float
    IniFilename: ctypes.c_void_p # CStringType: const char *
    LogFilename: ctypes.c_void_p # CStringType: const char *
    MouseDoubleClickTime: ctypes.c_float # FloatType: float
    MouseDoubleClickMaxDist: ctypes.c_float # FloatType: float
    MouseDragThreshold: ctypes.c_float # FloatType: float
    KeyMap: ctypes.c_int32 * 22 # ArrayType: int[22]
    KeyRepeatDelay: ctypes.c_float # FloatType: float
    KeyRepeatRate: ctypes.c_float # FloatType: float
    UserData: ctypes.Array # PointerType: void*
    Fonts: ImFontAtlas # PointerToStructType: ImFontAtlas*
    FontGlobalScale: ctypes.c_float # FloatType: float
    FontAllowUserScaling: ctypes.c_bool # BoolType: bool
    FontDefault: ImFont # PointerToStructType: ImFont*
    DisplayFramebufferScale: ImVec2 # ImVec2WrapType: ImVec2
    ConfigDockingNoSplit: ctypes.c_bool # BoolType: bool
    ConfigDockingWithShift: ctypes.c_bool # BoolType: bool
    ConfigDockingAlwaysTabBar: ctypes.c_bool # BoolType: bool
    ConfigDockingTransparentPayload: ctypes.c_bool # BoolType: bool
    ConfigViewportsNoAutoMerge: ctypes.c_bool # BoolType: bool
    ConfigViewportsNoTaskBarIcon: ctypes.c_bool # BoolType: bool
    ConfigViewportsNoDecoration: ctypes.c_bool # BoolType: bool
    ConfigViewportsNoDefaultParent: ctypes.c_bool # BoolType: bool
    MouseDrawCursor: ctypes.c_bool # BoolType: bool
    ConfigMacOSXBehaviors: ctypes.c_bool # BoolType: bool
    ConfigInputTextCursorBlink: ctypes.c_bool # BoolType: bool
    ConfigDragClickToInputText: ctypes.c_bool # BoolType: bool
    ConfigWindowsResizeFromEdges: ctypes.c_bool # BoolType: bool
    ConfigWindowsMoveFromTitleBarOnly: ctypes.c_bool # BoolType: bool
    ConfigMemoryCompactTimer: ctypes.c_float # FloatType: float
    BackendPlatformName: ctypes.c_void_p # CStringType: const char *
    BackendRendererName: ctypes.c_void_p # CStringType: const char *
    BackendPlatformUserData: ctypes.Array # PointerType: void*
    BackendRendererUserData: ctypes.Array # PointerType: void*
    BackendLanguageUserData: ctypes.Array # PointerType: void*
    GetClipboardTextFn: ctypes.Array # PointerType: void**
    SetClipboardTextFn: ctypes.Array # PointerType: void**
    ClipboardUserData: ctypes.Array # PointerType: void*
    MousePos: ImVec2 # ImVec2WrapType: ImVec2
    MouseDown: ctypes.c_bool * 5 # ArrayType: bool[5]
    MouseWheel: ctypes.c_float # FloatType: float
    MouseWheelH: ctypes.c_float # FloatType: float
    MouseHoveredViewport: ctypes.c_uint32 # UInt32Type: unsigned int
    KeyCtrl: ctypes.c_bool # BoolType: bool
    KeyShift: ctypes.c_bool # BoolType: bool
    KeyAlt: ctypes.c_bool # BoolType: bool
    KeySuper: ctypes.c_bool # BoolType: bool
    KeysDown: ctypes.c_bool * 512 # ArrayType: bool[512]
    NavInputs: ctypes.c_float * 20 # ArrayType: float[20]
    WantCaptureMouse: ctypes.c_bool # BoolType: bool
    WantCaptureKeyboard: ctypes.c_bool # BoolType: bool
    WantTextInput: ctypes.c_bool # BoolType: bool
    WantSetMousePos: ctypes.c_bool # BoolType: bool
    WantSaveIniSettings: ctypes.c_bool # BoolType: bool
    NavActive: ctypes.c_bool # BoolType: bool
    NavVisible: ctypes.c_bool # BoolType: bool
    Framerate: ctypes.c_float # FloatType: float
    MetricsRenderVertices: ctypes.c_int32 # Int32Type: int
    MetricsRenderIndices: ctypes.c_int32 # Int32Type: int
    MetricsRenderWindows: ctypes.c_int32 # Int32Type: int
    MetricsActiveWindows: ctypes.c_int32 # Int32Type: int
    MetricsActiveAllocations: ctypes.c_int32 # Int32Type: int
    MouseDelta: ImVec2 # ImVec2WrapType: ImVec2
    WantCaptureMouseUnlessPopupClose: ctypes.c_bool # BoolType: bool
    KeyMods: ctypes.c_int32 # Int32Type: int
    KeyModsPrev: ctypes.c_int32 # Int32Type: int
    MousePosPrev: ImVec2 # ImVec2WrapType: ImVec2
    MouseClickedPos: ImVec2 * 5 # ArrayType: ImVec2[5]
    MouseClickedTime: ctypes.c_double * 5 # ArrayType: double[5]
    MouseClicked: ctypes.c_bool * 5 # ArrayType: bool[5]
    MouseDoubleClicked: ctypes.c_bool * 5 # ArrayType: bool[5]
    MouseClickedCount: ctypes.c_uint16 * 5 # ArrayType: unsigned short[5]
    MouseClickedLastCount: ctypes.c_uint16 * 5 # ArrayType: unsigned short[5]
    MouseReleased: ctypes.c_bool * 5 # ArrayType: bool[5]
    MouseDownOwned: ctypes.c_bool * 5 # ArrayType: bool[5]
    MouseDownOwnedUnlessPopupClose: ctypes.c_bool * 5 # ArrayType: bool[5]
    MouseDownDuration: ctypes.c_float * 5 # ArrayType: float[5]
    MouseDownDurationPrev: ctypes.c_float * 5 # ArrayType: float[5]
    MouseDragMaxDistanceAbs: ImVec2 * 5 # ArrayType: ImVec2[5]
    MouseDragMaxDistanceSqr: ctypes.c_float * 5 # ArrayType: float[5]
    KeysDownDuration: ctypes.c_float * 512 # ArrayType: float[512]
    KeysDownDurationPrev: ctypes.c_float * 512 # ArrayType: float[512]
    NavInputsDownDuration: ctypes.c_float * 20 # ArrayType: float[20]
    NavInputsDownDurationPrev: ctypes.c_float * 20 # ArrayType: float[20]
    PenPressure: ctypes.c_float # FloatType: float
    AppFocusLost: ctypes.c_bool # BoolType: bool
    InputQueueSurrogate: ctypes.c_uint16 # UInt16Type: unsigned short
    InputQueueCharacters: ImVector # ImVector: ImVector

    @property
    def Fonts(self)->'ImFontAtlas': ...
class ImGuiContext(ctypes.Structure):
    pass

class ImDrawCmd(ctypes.Structure):
    ClipRect: ImVec4 # ImVec4WrapType: ImVec4
    TextureId: ctypes.Array # PointerType: void*
    VtxOffset: ctypes.c_uint32 # UInt32Type: unsigned int
    IdxOffset: ctypes.c_uint32 # UInt32Type: unsigned int
    ElemCount: ctypes.c_uint32 # UInt32Type: unsigned int
    UserCallback: ctypes.c_void_p # TypedefType: ImDrawCallback
    UserCallbackData: ctypes.Array # PointerType: void*

class ImDrawData(ctypes.Structure):
    Valid: ctypes.c_bool # BoolType: bool
    CmdListsCount: ctypes.c_int32 # Int32Type: int
    TotalIdxCount: ctypes.c_int32 # Int32Type: int
    TotalVtxCount: ctypes.c_int32 # Int32Type: int
    CmdLists: ctypes.Array # PointerType: ImDrawList**
    DisplayPos: ImVec2 # ImVec2WrapType: ImVec2
    DisplaySize: ImVec2 # ImVec2WrapType: ImVec2
    FramebufferScale: ImVec2 # ImVec2WrapType: ImVec2
    OwnerViewport: ImGuiViewport # PointerToStructType: ImGuiViewport*

class ImDrawListSplitter(ctypes.Structure):
    _Current: ctypes.c_int32 # Int32Type: int
    _Count: ctypes.c_int32 # Int32Type: int
    _Channels: ImVector # ImVector: ImVector

class ImDrawCmdHeader(ctypes.Structure):
    ClipRect: ImVec4 # ImVec4WrapType: ImVec4
    TextureId: ctypes.Array # PointerType: void*
    VtxOffset: ctypes.c_uint32 # UInt32Type: unsigned int

class ImDrawList(ctypes.Structure):
    CmdBuffer: ImVector # ImVector: ImVector
    IdxBuffer: ImVector # ImVector: ImVector
    VtxBuffer: ImVector # ImVector: ImVector
    Flags: ctypes.c_int32 # Int32Type: int
    _VtxCurrentIdx: ctypes.c_uint32 # UInt32Type: unsigned int
    _Data: ctypes.Array # PointerType: ImDrawListSharedData*
    _OwnerName: ctypes.c_void_p # CStringType: const char *
    _VtxWritePtr: ctypes.Array # PointerType: ImDrawVert*
    _IdxWritePtr: ctypes.Array # PointerType: unsigned short*
    _ClipRectStack: ImVector # ImVector: ImVector
    _TextureIdStack: ImVector # ImVector: ImVector
    _Path: ImVector # ImVector: ImVector
    _CmdHeader: ImDrawCmdHeader # StructType: ImDrawCmdHeader
    _Splitter: ImDrawListSplitter # StructType: ImDrawListSplitter
    _FringeScale: ctypes.c_float # FloatType: float

class ImGuiViewport(ctypes.Structure):
    ID: ctypes.c_uint32 # UInt32Type: unsigned int
    Flags: ctypes.c_int32 # Int32Type: int
    Pos: ImVec2 # ImVec2WrapType: ImVec2
    Size: ImVec2 # ImVec2WrapType: ImVec2
    WorkPos: ImVec2 # ImVec2WrapType: ImVec2
    WorkSize: ImVec2 # ImVec2WrapType: ImVec2
    DpiScale: ctypes.c_float # FloatType: float
    ParentViewportId: ctypes.c_uint32 # UInt32Type: unsigned int
    DrawData: ImDrawData # PointerToStructType: ImDrawData*
    RendererUserData: ctypes.Array # PointerType: void*
    PlatformUserData: ctypes.Array # PointerType: void*
    PlatformHandle: ctypes.Array # PointerType: void*
    PlatformHandleRaw: ctypes.Array # PointerType: void*
    PlatformRequestMove: ctypes.c_bool # BoolType: bool
    PlatformRequestResize: ctypes.c_bool # BoolType: bool
    PlatformRequestClose: ctypes.c_bool # BoolType: bool

    def GetCenter(self)->Tuple[float, float]: ...
    def GetWorkCenter(self)->Tuple[float, float]: ...
class ImGuiStyle(ctypes.Structure):
    pass

class ImGuiWindowClass(ctypes.Structure):
    pass

def CreateContext(shared_font_atlas: ImFontAtlas= None)->ImGuiContext: ...
def DestroyContext(ctx: ImGuiContext= None)->None: ...
def GetCurrentContext()->ImGuiContext: ...
def SetCurrentContext(ctx: ImGuiContext)->None: ...
def GetIO()->ImGuiIO: ...
def GetStyle()->ImGuiStyle: ...
def NewFrame()->None: ...
def EndFrame()->None: ...
def Render()->None: ...
def GetDrawData()->ImDrawData: ...
def ShowDemoWindow(p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None)->None: ...
def ShowMetricsWindow(p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None)->None: ...
def ShowStackToolWindow(p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None)->None: ...
def ShowAboutWindow(p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None)->None: ...
def ShowStyleEditor(ref: ImGuiStyle= None)->None: ...
def ShowStyleSelector(label: Union[bytes, str])->bool: ...
def ShowFontSelector(label: Union[bytes, str])->None: ...
def ShowUserGuide()->None: ...
def GetVersion()->bytes: ...
def StyleColorsDark(dst: ImGuiStyle= None)->None: ...
def StyleColorsLight(dst: ImGuiStyle= None)->None: ...
def StyleColorsClassic(dst: ImGuiStyle= None)->None: ...
def Begin(name: Union[bytes, str], p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None, flags: int= 0)->bool: ...
def End()->None: ...
def BeginChild(str_id: Union[bytes, str], size: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 0 , 0 ), border: bool= False, flags: int= 0)->bool: ...
def BeginChild_2(_id: int, size: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 0 , 0 ), border: bool= False, flags: int= 0)->bool: ...
def EndChild()->None: ...
def IsWindowAppearing()->bool: ...
def IsWindowCollapsed()->bool: ...
def IsWindowFocused(flags: int= 0)->bool: ...
def IsWindowHovered(flags: int= 0)->bool: ...
def GetWindowDrawList()->ImDrawList: ...
def GetWindowDpiScale()->float: ...
def GetWindowPos()->Tuple[float, float]: ...
def GetWindowSize()->Tuple[float, float]: ...
def GetWindowWidth()->float: ...
def GetWindowHeight()->float: ...
def GetWindowViewport()->ImGuiViewport: ...
def SetNextWindowPos(pos: Union[ImVec2, Tuple[float, float]], cond: int= 0, pivot: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 0 , 0 ))->None: ...
def SetNextWindowSize(size: Union[ImVec2, Tuple[float, float]], cond: int= 0)->None: ...
def SetNextWindowContentSize(size: Union[ImVec2, Tuple[float, float]])->None: ...
def SetNextWindowCollapsed(collapsed: bool, cond: int= 0)->None: ...
def SetNextWindowFocus()->None: ...
def SetNextWindowBgAlpha(alpha: float)->None: ...
def SetNextWindowViewport(viewport_id: int)->None: ...
def SetWindowPos(pos: Union[ImVec2, Tuple[float, float]], cond: int= 0)->None: ...
def SetWindowSize(size: Union[ImVec2, Tuple[float, float]], cond: int= 0)->None: ...
def SetWindowCollapsed(collapsed: bool, cond: int= 0)->None: ...
def SetWindowFocus()->None: ...
def SetWindowFontScale(scale: float)->None: ...
def SetWindowPos_2(name: Union[bytes, str], pos: Union[ImVec2, Tuple[float, float]], cond: int= 0)->None: ...
def SetWindowSize_2(name: Union[bytes, str], size: Union[ImVec2, Tuple[float, float]], cond: int= 0)->None: ...
def SetWindowCollapsed_2(name: Union[bytes, str], collapsed: bool, cond: int= 0)->None: ...
def SetWindowFocus_2(name: Union[bytes, str])->None: ...
def GetContentRegionAvail()->Tuple[float, float]: ...
def GetContentRegionMax()->Tuple[float, float]: ...
def GetWindowContentRegionMin()->Tuple[float, float]: ...
def GetWindowContentRegionMax()->Tuple[float, float]: ...
def GetScrollX()->float: ...
def GetScrollY()->float: ...
def SetScrollX(scroll_x: float)->None: ...
def SetScrollY(scroll_y: float)->None: ...
def GetScrollMaxX()->float: ...
def GetScrollMaxY()->float: ...
def SetScrollHereX(center_x_ratio: float= 0.5)->None: ...
def SetScrollHereY(center_y_ratio: float= 0.5)->None: ...
def SetScrollFromPosX(local_x: float, center_x_ratio: float= 0.5)->None: ...
def SetScrollFromPosY(local_y: float, center_y_ratio: float= 0.5)->None: ...
def PushFont(font: ImFont)->None: ...
def PopFont()->None: ...
def PushStyleColor(idx: int, col: int)->None: ...
def PushStyleColor_2(idx: int, col: ImVec4)->None: ...
def PopStyleColor(count: int= 1)->None: ...
def PushStyleVar(idx: int, val: float)->None: ...
def PushStyleVar_2(idx: int, val: Union[ImVec2, Tuple[float, float]])->None: ...
def PopStyleVar(count: int= 1)->None: ...
def PushAllowKeyboardFocus(allow_keyboard_focus: bool)->None: ...
def PopAllowKeyboardFocus()->None: ...
def PushButtonRepeat(repeat: bool)->None: ...
def PopButtonRepeat()->None: ...
def PushItemWidth(item_width: float)->None: ...
def PopItemWidth()->None: ...
def SetNextItemWidth(item_width: float)->None: ...
def CalcItemWidth()->float: ...
def PushTextWrapPos(wrap_local_pos_x: float= 0.0)->None: ...
def PopTextWrapPos()->None: ...
def GetFont()->ImFont: ...
def GetFontSize()->float: ...
def GetFontTexUvWhitePixel()->Tuple[float, float]: ...
def GetColorU32(idx: int, alpha_mul: float= 1.0)->int: ...
def GetColorU32_2(col: ImVec4)->int: ...
def GetColorU32_3(col: int)->int: ...
def GetStyleColorVec4(idx: int)->ImVec4: ...
def Separator()->None: ...
def SameLine(offset_from_start_x: float= 0.0, spacing: float= - 1.0)->None: ...
def NewLine()->None: ...
def Spacing()->None: ...
def Dummy(size: Union[ImVec2, Tuple[float, float]])->None: ...
def Indent(indent_w: float= 0.0)->None: ...
def Unindent(indent_w: float= 0.0)->None: ...
def BeginGroup()->None: ...
def EndGroup()->None: ...
def GetCursorPos()->Tuple[float, float]: ...
def GetCursorPosX()->float: ...
def GetCursorPosY()->float: ...
def SetCursorPos(local_pos: Union[ImVec2, Tuple[float, float]])->None: ...
def SetCursorPosX(local_x: float)->None: ...
def SetCursorPosY(local_y: float)->None: ...
def GetCursorStartPos()->Tuple[float, float]: ...
def GetCursorScreenPos()->Tuple[float, float]: ...
def SetCursorScreenPos(pos: Union[ImVec2, Tuple[float, float]])->None: ...
def AlignTextToFramePadding()->None: ...
def GetTextLineHeight()->float: ...
def GetTextLineHeightWithSpacing()->float: ...
def GetFrameHeight()->float: ...
def GetFrameHeightWithSpacing()->float: ...
def PushID(str_id: Union[bytes, str])->None: ...
def PushID_2(str_id_begin: Union[bytes, str], str_id_end: Union[bytes, str])->None: ...
def PushID_3(ptr_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure])->None: ...
def PushID_4(int_id: int)->None: ...
def PopID()->None: ...
def GetID(str_id: Union[bytes, str])->int: ...
def GetID_2(str_id_begin: Union[bytes, str], str_id_end: Union[bytes, str])->int: ...
def GetID_3(ptr_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure])->int: ...
def TextUnformatted(text: Union[bytes, str], text_end: Union[bytes, str]= None)->None: ...
def Text(fmt: Union[bytes, str])->None: ...
def TextColored(col: ImVec4, fmt: Union[bytes, str])->None: ...
def TextDisabled(fmt: Union[bytes, str])->None: ...
def TextWrapped(fmt: Union[bytes, str])->None: ...
def LabelText(label: Union[bytes, str], fmt: Union[bytes, str])->None: ...
def BulletText(fmt: Union[bytes, str])->None: ...
def Button(label: Union[bytes, str], size: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 0 , 0 ))->bool: ...
def SmallButton(label: Union[bytes, str])->bool: ...
def InvisibleButton(str_id: Union[bytes, str], size: Union[ImVec2, Tuple[float, float]], flags: int= 0)->bool: ...
def ArrowButton(str_id: Union[bytes, str], dir: int)->bool: ...
def Image(user_texture_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], size: Union[ImVec2, Tuple[float, float]], uv0: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 0 , 0 ), uv1: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 1 , 1 ), tint_col: ImVec4= ImVec4 ( 1 , 1 , 1 , 1 ), border_col: ImVec4= ImVec4 ( 0 , 0 , 0 , 0 ))->None: ...
def ImageButton(user_texture_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], size: Union[ImVec2, Tuple[float, float]], uv0: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 0 , 0 ), uv1: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 1 , 1 ), frame_padding: int= - 1, bg_col: ImVec4= ImVec4 ( 0 , 0 , 0 , 0 ), tint_col: ImVec4= ImVec4 ( 1 , 1 , 1 , 1 ))->bool: ...
def Checkbox(label: Union[bytes, str], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure])->bool: ...
def RadioButton(label: Union[bytes, str], active: bool)->bool: ...
def RadioButton_2(label: Union[bytes, str], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_button: int)->bool: ...
def ProgressBar(fraction: float, size_arg: Union[ImVec2, Tuple[float, float]]= ImVec2 ( - 1.175494351e-38 , 0 ), overlay: Union[bytes, str]= None)->None: ...
def Bullet()->None: ...
def BeginCombo(label: Union[bytes, str], preview_value: Union[bytes, str], flags: int= 0)->bool: ...
def EndCombo()->None: ...
def DragFloat(label: Union[bytes, str], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_speed: float= 1.0, v_min: float= 0.0, v_max: float= 0.0, format: Union[bytes, str]= b"%.3f", flags: int= 0)->bool: ...
def DragFloat2(label: Union[bytes, str], v: ctypes.Array, v_speed: float= 1.0, v_min: float= 0.0, v_max: float= 0.0, format: Union[bytes, str]= b"%.3f", flags: int= 0)->bool: ...
def DragFloat3(label: Union[bytes, str], v: ctypes.Array, v_speed: float= 1.0, v_min: float= 0.0, v_max: float= 0.0, format: Union[bytes, str]= b"%.3f", flags: int= 0)->bool: ...
def DragFloat4(label: Union[bytes, str], v: ctypes.Array, v_speed: float= 1.0, v_min: float= 0.0, v_max: float= 0.0, format: Union[bytes, str]= b"%.3f", flags: int= 0)->bool: ...
def DragFloatRange2(label: Union[bytes, str], v_current_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_current_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_speed: float= 1.0, v_min: float= 0.0, v_max: float= 0.0, format: Union[bytes, str]= b"%.3f", format_max: Union[bytes, str]= None, flags: int= 0)->bool: ...
def DragInt(label: Union[bytes, str], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_speed: float= 1.0, v_min: int= 0, v_max: int= 0, format: Union[bytes, str]= b"%d", flags: int= 0)->bool: ...
def DragInt2(label: Union[bytes, str], v: ctypes.Array, v_speed: float= 1.0, v_min: int= 0, v_max: int= 0, format: Union[bytes, str]= b"%d", flags: int= 0)->bool: ...
def DragInt3(label: Union[bytes, str], v: ctypes.Array, v_speed: float= 1.0, v_min: int= 0, v_max: int= 0, format: Union[bytes, str]= b"%d", flags: int= 0)->bool: ...
def DragInt4(label: Union[bytes, str], v: ctypes.Array, v_speed: float= 1.0, v_min: int= 0, v_max: int= 0, format: Union[bytes, str]= b"%d", flags: int= 0)->bool: ...
def DragIntRange2(label: Union[bytes, str], v_current_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_current_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_speed: float= 1.0, v_min: int= 0, v_max: int= 0, format: Union[bytes, str]= b"%d", format_max: Union[bytes, str]= None, flags: int= 0)->bool: ...
def DragScalar(label: Union[bytes, str], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_speed: float= 1.0, p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None, p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None, format: Union[bytes, str]= None, flags: int= 0)->bool: ...
def DragScalarN(label: Union[bytes, str], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], components: int, v_speed: float= 1.0, p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None, p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None, format: Union[bytes, str]= None, flags: int= 0)->bool: ...
def SliderFloat(label: Union[bytes, str], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_min: float, v_max: float, format: Union[bytes, str]= b"%.3f", flags: int= 0)->bool: ...
def SliderFloat2(label: Union[bytes, str], v: ctypes.Array, v_min: float, v_max: float, format: Union[bytes, str]= b"%.3f", flags: int= 0)->bool: ...
def SliderFloat3(label: Union[bytes, str], v: ctypes.Array, v_min: float, v_max: float, format: Union[bytes, str]= b"%.3f", flags: int= 0)->bool: ...
def SliderFloat4(label: Union[bytes, str], v: ctypes.Array, v_min: float, v_max: float, format: Union[bytes, str]= b"%.3f", flags: int= 0)->bool: ...
def SliderAngle(label: Union[bytes, str], v_rad: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_degrees_min: float= - 360.0, v_degrees_max: float= + 360.0, format: Union[bytes, str]= b"%.0f deg", flags: int= 0)->bool: ...
def SliderInt(label: Union[bytes, str], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_min: int, v_max: int, format: Union[bytes, str]= b"%d", flags: int= 0)->bool: ...
def SliderInt2(label: Union[bytes, str], v: ctypes.Array, v_min: int, v_max: int, format: Union[bytes, str]= b"%d", flags: int= 0)->bool: ...
def SliderInt3(label: Union[bytes, str], v: ctypes.Array, v_min: int, v_max: int, format: Union[bytes, str]= b"%d", flags: int= 0)->bool: ...
def SliderInt4(label: Union[bytes, str], v: ctypes.Array, v_min: int, v_max: int, format: Union[bytes, str]= b"%d", flags: int= 0)->bool: ...
def SliderScalar(label: Union[bytes, str], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], format: Union[bytes, str]= None, flags: int= 0)->bool: ...
def SliderScalarN(label: Union[bytes, str], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], components: int, p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], format: Union[bytes, str]= None, flags: int= 0)->bool: ...
def VSliderFloat(label: Union[bytes, str], size: Union[ImVec2, Tuple[float, float]], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_min: float, v_max: float, format: Union[bytes, str]= b"%.3f", flags: int= 0)->bool: ...
def VSliderInt(label: Union[bytes, str], size: Union[ImVec2, Tuple[float, float]], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_min: int, v_max: int, format: Union[bytes, str]= b"%d", flags: int= 0)->bool: ...
def VSliderScalar(label: Union[bytes, str], size: Union[ImVec2, Tuple[float, float]], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], format: Union[bytes, str]= None, flags: int= 0)->bool: ...
def InputFloat(label: Union[bytes, str], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], step: float= 0.0, step_fast: float= 0.0, format: Union[bytes, str]= b"%.3f", flags: int= 0)->bool: ...
def InputFloat2(label: Union[bytes, str], v: ctypes.Array, format: Union[bytes, str]= b"%.3f", flags: int= 0)->bool: ...
def InputFloat3(label: Union[bytes, str], v: ctypes.Array, format: Union[bytes, str]= b"%.3f", flags: int= 0)->bool: ...
def InputFloat4(label: Union[bytes, str], v: ctypes.Array, format: Union[bytes, str]= b"%.3f", flags: int= 0)->bool: ...
def InputInt(label: Union[bytes, str], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], step: int= 1, step_fast: int= 100, flags: int= 0)->bool: ...
def InputInt2(label: Union[bytes, str], v: ctypes.Array, flags: int= 0)->bool: ...
def InputInt3(label: Union[bytes, str], v: ctypes.Array, flags: int= 0)->bool: ...
def InputInt4(label: Union[bytes, str], v: ctypes.Array, flags: int= 0)->bool: ...
def InputDouble(label: Union[bytes, str], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], step: float= 0.0, step_fast: float= 0.0, format: Union[bytes, str]= b"%.6f", flags: int= 0)->bool: ...
def InputScalar(label: Union[bytes, str], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], p_step: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None, p_step_fast: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None, format: Union[bytes, str]= None, flags: int= 0)->bool: ...
def InputScalarN(label: Union[bytes, str], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], components: int, p_step: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None, p_step_fast: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None, format: Union[bytes, str]= None, flags: int= 0)->bool: ...
def ColorEdit3(label: Union[bytes, str], col: ctypes.Array, flags: int= 0)->bool: ...
def ColorEdit4(label: Union[bytes, str], col: ctypes.Array, flags: int= 0)->bool: ...
def ColorPicker3(label: Union[bytes, str], col: ctypes.Array, flags: int= 0)->bool: ...
def ColorPicker4(label: Union[bytes, str], col: ctypes.Array, flags: int= 0, ref_col: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None)->bool: ...
def ColorButton(desc_id: Union[bytes, str], col: ImVec4, flags: int= 0, size: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 0 , 0 ))->bool: ...
def SetColorEditOptions(flags: int)->None: ...
def TreeNode(label: Union[bytes, str])->bool: ...
def TreeNode_2(str_id: Union[bytes, str], fmt: Union[bytes, str])->bool: ...
def TreeNode_3(ptr_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], fmt: Union[bytes, str])->bool: ...
def TreeNodeEx(label: Union[bytes, str], flags: int= 0)->bool: ...
def TreeNodeEx_2(str_id: Union[bytes, str], flags: int, fmt: Union[bytes, str])->bool: ...
def TreeNodeEx_3(ptr_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], flags: int, fmt: Union[bytes, str])->bool: ...
def TreePush(str_id: Union[bytes, str])->None: ...
def TreePush_2(ptr_id: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None)->None: ...
def TreePop()->None: ...
def GetTreeNodeToLabelSpacing()->float: ...
def CollapsingHeader(label: Union[bytes, str], flags: int= 0)->bool: ...
def CollapsingHeader_2(label: Union[bytes, str], p_visible: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], flags: int= 0)->bool: ...
def SetNextItemOpen(is_open: bool, cond: int= 0)->None: ...
def Selectable(label: Union[bytes, str], selected: bool= False, flags: int= 0, size: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 0 , 0 ))->bool: ...
def Selectable_2(label: Union[bytes, str], p_selected: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], flags: int= 0, size: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 0 , 0 ))->bool: ...
def BeginListBox(label: Union[bytes, str], size: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 0 , 0 ))->bool: ...
def EndListBox()->None: ...
def PlotHistogram(label: Union[bytes, str], values: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], values_count: int, values_offset: int= 0, overlay_text: Union[bytes, str]= None, scale_min: float= 3.402823466e+38, scale_max: float= 3.402823466e+38, graph_size: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 0 , 0 ), stride: int= sizeof ( float ))->None: ...
def Value(prefix: Union[bytes, str], b: bool)->None: ...
def Value_2(prefix: Union[bytes, str], v: int)->None: ...
def Value_3(prefix: Union[bytes, str], v: int)->None: ...
def Value_4(prefix: Union[bytes, str], v: float, float_format: Union[bytes, str]= None)->None: ...
def BeginMenuBar()->bool: ...
def EndMenuBar()->None: ...
def BeginMainMenuBar()->bool: ...
def EndMainMenuBar()->None: ...
def BeginMenu(label: Union[bytes, str], enabled: bool= True)->bool: ...
def EndMenu()->None: ...
def MenuItem(label: Union[bytes, str], shortcut: Union[bytes, str]= None, selected: bool= False, enabled: bool= True)->bool: ...
def MenuItem_2(label: Union[bytes, str], shortcut: Union[bytes, str], p_selected: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], enabled: bool= True)->bool: ...
def BeginTooltip()->None: ...
def EndTooltip()->None: ...
def SetTooltip(fmt: Union[bytes, str])->None: ...
def BeginPopup(str_id: Union[bytes, str], flags: int= 0)->bool: ...
def BeginPopupModal(name: Union[bytes, str], p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None, flags: int= 0)->bool: ...
def EndPopup()->None: ...
def OpenPopup(str_id: Union[bytes, str], popup_flags: int= 0)->None: ...
def OpenPopup_2(_id: int, popup_flags: int= 0)->None: ...
def OpenPopupOnItemClick(str_id: Union[bytes, str]= None, popup_flags: int= 1)->None: ...
def CloseCurrentPopup()->None: ...
def BeginPopupContextItem(str_id: Union[bytes, str]= None, popup_flags: int= 1)->bool: ...
def BeginPopupContextWindow(str_id: Union[bytes, str]= None, popup_flags: int= 1)->bool: ...
def BeginPopupContextVoid(str_id: Union[bytes, str]= None, popup_flags: int= 1)->bool: ...
def IsPopupOpen(str_id: Union[bytes, str], flags: int= 0)->bool: ...
def BeginTable(str_id: Union[bytes, str], column: int, flags: int= 0, outer_size: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 0.0 , 0.0 ), inner_width: float= 0.0)->bool: ...
def EndTable()->None: ...
def TableNextRow(row_flags: int= 0, min_row_height: float= 0.0)->None: ...
def TableNextColumn()->bool: ...
def TableSetColumnIndex(column_n: int)->bool: ...
def TableSetupColumn(label: Union[bytes, str], flags: int= 0, init_width_or_weight: float= 0.0, user_id: int= 0)->None: ...
def TableSetupScrollFreeze(cols: int, rows: int)->None: ...
def TableHeadersRow()->None: ...
def TableHeader(label: Union[bytes, str])->None: ...
def TableGetSortSpecs()->ctypes.c_void_p: ...
def TableGetColumnCount()->int: ...
def TableGetColumnIndex()->int: ...
def TableGetRowIndex()->int: ...
def TableGetColumnName(column_n: int= - 1)->bytes: ...
def TableGetColumnFlags(column_n: int= - 1)->int: ...
def TableSetColumnEnabled(column_n: int, v: bool)->None: ...
def TableSetBgColor(target: int, color: int, column_n: int= - 1)->None: ...
def Columns(count: int= 1, _id: Union[bytes, str]= None, border: bool= True)->None: ...
def NextColumn()->None: ...
def GetColumnIndex()->int: ...
def GetColumnWidth(column_index: int= - 1)->float: ...
def SetColumnWidth(column_index: int, width: float)->None: ...
def GetColumnOffset(column_index: int= - 1)->float: ...
def SetColumnOffset(column_index: int, offset_x: float)->None: ...
def GetColumnsCount()->int: ...
def BeginTabBar(str_id: Union[bytes, str], flags: int= 0)->bool: ...
def EndTabBar()->None: ...
def BeginTabItem(label: Union[bytes, str], p_open: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None, flags: int= 0)->bool: ...
def EndTabItem()->None: ...
def TabItemButton(label: Union[bytes, str], flags: int= 0)->bool: ...
def SetTabItemClosed(tab_or_docked_window_label: Union[bytes, str])->None: ...
def DockSpace(_id: int, size: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 0 , 0 ), flags: int= 0, window_class: ImGuiWindowClass= None)->int: ...
def DockSpaceOverViewport(viewport: ImGuiViewport= None, flags: int= 0, window_class: ImGuiWindowClass= None)->int: ...
def SetNextWindowDockID(dock_id: int, cond: int= 0)->None: ...
def SetNextWindowClass(window_class: ImGuiWindowClass)->None: ...
def GetWindowDockID()->int: ...
def IsWindowDocked()->bool: ...
def LogToTTY(auto_open_depth: int= - 1)->None: ...
def LogToFile(auto_open_depth: int= - 1, filename: Union[bytes, str]= None)->None: ...
def LogToClipboard(auto_open_depth: int= - 1)->None: ...
def LogFinish()->None: ...
def LogButtons()->None: ...
def LogText(fmt: Union[bytes, str])->None: ...
def BeginDragDropSource(flags: int= 0)->bool: ...
def SetDragDropPayload(type: Union[bytes, str], data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], sz: int, cond: int= 0)->bool: ...
def EndDragDropSource()->None: ...
def BeginDragDropTarget()->bool: ...
def AcceptDragDropPayload(type: Union[bytes, str], flags: int= 0)->ctypes.c_void_p: ...
def EndDragDropTarget()->None: ...
def GetDragDropPayload()->ctypes.c_void_p: ...
def BeginDisabled(disabled: bool= True)->None: ...
def EndDisabled()->None: ...
def PushClipRect(clip_rect_min: Union[ImVec2, Tuple[float, float]], clip_rect_max: Union[ImVec2, Tuple[float, float]], intersect_with_current_clip_rect: bool)->None: ...
def PopClipRect()->None: ...
def SetItemDefaultFocus()->None: ...
def SetKeyboardFocusHere(offset: int= 0)->None: ...
def IsItemHovered(flags: int= 0)->bool: ...
def IsItemActive()->bool: ...
def IsItemFocused()->bool: ...
def IsItemClicked(mouse_button: int= 0)->bool: ...
def IsItemVisible()->bool: ...
def IsItemEdited()->bool: ...
def IsItemActivated()->bool: ...
def IsItemDeactivated()->bool: ...
def IsItemDeactivatedAfterEdit()->bool: ...
def IsItemToggledOpen()->bool: ...
def IsAnyItemHovered()->bool: ...
def IsAnyItemActive()->bool: ...
def IsAnyItemFocused()->bool: ...
def GetItemRectMin()->Tuple[float, float]: ...
def GetItemRectMax()->Tuple[float, float]: ...
def GetItemRectSize()->Tuple[float, float]: ...
def SetItemAllowOverlap()->None: ...
def GetMainViewport()->ImGuiViewport: ...
def IsRectVisible(size: Union[ImVec2, Tuple[float, float]])->bool: ...
def IsRectVisible_2(rect_min: Union[ImVec2, Tuple[float, float]], rect_max: Union[ImVec2, Tuple[float, float]])->bool: ...
def GetTime()->float: ...
def GetFrameCount()->int: ...
def GetBackgroundDrawList()->ImDrawList: ...
def GetForegroundDrawList()->ImDrawList: ...
def GetBackgroundDrawList_2(viewport: ImGuiViewport)->ImDrawList: ...
def GetForegroundDrawList_2(viewport: ImGuiViewport)->ImDrawList: ...
def GetDrawListSharedData()->ctypes.c_void_p: ...
def GetStyleColorName(idx: int)->bytes: ...
def BeginChildFrame(_id: int, size: Union[ImVec2, Tuple[float, float]], flags: int= 0)->bool: ...
def EndChildFrame()->None: ...
def CalcTextSize(text: Union[bytes, str], text_end: Union[bytes, str]= None, hide_text_after_double_hash: bool= False, wrap_width: float= - 1.0)->Tuple[float, float]: ...
def ColorConvertU32ToFloat4(_in: int)->Tuple[float, float, float, float]: ...
def ColorConvertFloat4ToU32(_in: ImVec4)->int: ...
def ColorConvertRGBtoHSV(r: float, g: float, b: float, out_h: ctypes.Array, out_s: ctypes.Array, out_v: ctypes.Array)->None: ...
def ColorConvertHSVtoRGB(h: float, s: float, v: float, out_r: ctypes.Array, out_g: ctypes.Array, out_b: ctypes.Array)->None: ...
def GetKeyIndex(imgui_key: int)->int: ...
def IsKeyDown(user_key_index: int)->bool: ...
def IsKeyPressed(user_key_index: int, repeat: bool= True)->bool: ...
def IsKeyReleased(user_key_index: int)->bool: ...
def GetKeyPressedAmount(key_index: int, repeat_delay: float, rate: float)->int: ...
def CaptureKeyboardFromApp(want_capture_keyboard_value: bool= True)->None: ...
def IsMouseDown(button: int)->bool: ...
def IsMouseClicked(button: int, repeat: bool= False)->bool: ...
def IsMouseReleased(button: int)->bool: ...
def IsMouseDoubleClicked(button: int)->bool: ...
def GetMouseClickedCount(button: int)->int: ...
def IsMouseHoveringRect(r_min: Union[ImVec2, Tuple[float, float]], r_max: Union[ImVec2, Tuple[float, float]], clip: bool= True)->bool: ...
def IsMousePosValid(mouse_pos: ImVec2= None)->bool: ...
def IsAnyMouseDown()->bool: ...
def GetMousePos()->Tuple[float, float]: ...
def GetMousePosOnOpeningCurrentPopup()->Tuple[float, float]: ...
def IsMouseDragging(button: int, lock_threshold: float= - 1.0)->bool: ...
def GetMouseDragDelta(button: int= 0, lock_threshold: float= - 1.0)->Tuple[float, float]: ...
def ResetMouseDragDelta(button: int= 0)->None: ...
def GetMouseCursor()->int: ...
def SetMouseCursor(cursor_type: int)->None: ...
def CaptureMouseFromApp(want_capture_mouse_value: bool= True)->None: ...
def GetClipboardText()->bytes: ...
def SetClipboardText(text: Union[bytes, str])->None: ...
def LoadIniSettingsFromDisk(ini_filename: Union[bytes, str])->None: ...
def LoadIniSettingsFromMemory(ini_data: Union[bytes, str], ini_size: int= 0)->None: ...
def SaveIniSettingsToDisk(ini_filename: Union[bytes, str])->None: ...
def SaveIniSettingsToMemory(out_ini_size: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None)->bytes: ...
def DebugCheckVersionAndDataLayout(version_str: Union[bytes, str], sz_io: int, sz_style: int, sz_vec2: int, sz_vec4: int, sz_drawvert: int, sz_drawidx: int)->bool: ...
def MemAlloc(size: int)->ctypes.c_void_p: ...
def MemFree(ptr: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure])->None: ...
def GetPlatformIO()->ctypes.c_void_p: ...
def UpdatePlatformWindows()->None: ...
def RenderPlatformWindowsDefault(platform_render_arg: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None, renderer_render_arg: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure]= None)->None: ...
def DestroyPlatformWindows()->None: ...
def FindViewportByID(_id: int)->ImGuiViewport: ...
def FindViewportByPlatformHandle(platform_handle: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure])->ImGuiViewport: ...
def CalcListClipping(items_count: int, items_height: float, out_items_display_start: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], out_items_display_end: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure])->None: ...
def GetWindowContentRegionWidth()->float: ...
def ListBoxHeader(label: Union[bytes, str], items_count: int, height_in_items: int= - 1)->bool: ...
def ListBoxHeader_2(label: Union[bytes, str], size: Union[ImVec2, Tuple[float, float]]= ImVec2 ( 0 , 0 ))->bool: ...
def ListBoxFooter()->None: ...
def OpenPopupContextItem(str_id: Union[bytes, str]= None, mb: int= 1)->None: ...
def DragScalar_2(label: Union[bytes, str], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_speed: float, p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], format: Union[bytes, str], power: float)->bool: ...
def DragScalarN_2(label: Union[bytes, str], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], components: int, v_speed: float, p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], format: Union[bytes, str], power: float)->bool: ...
def DragFloat_2(label: Union[bytes, str], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_speed: float, v_min: float, v_max: float, format: Union[bytes, str], power: float)->bool: ...
def DragFloat2_2(label: Union[bytes, str], v: ctypes.Array, v_speed: float, v_min: float, v_max: float, format: Union[bytes, str], power: float)->bool: ...
def DragFloat3_2(label: Union[bytes, str], v: ctypes.Array, v_speed: float, v_min: float, v_max: float, format: Union[bytes, str], power: float)->bool: ...
def DragFloat4_2(label: Union[bytes, str], v: ctypes.Array, v_speed: float, v_min: float, v_max: float, format: Union[bytes, str], power: float)->bool: ...
def SliderScalar_2(label: Union[bytes, str], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], format: Union[bytes, str], power: float)->bool: ...
def SliderScalarN_2(label: Union[bytes, str], data_type: int, p_data: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], components: int, p_min: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], p_max: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], format: Union[bytes, str], power: float)->bool: ...
def SliderFloat_2(label: Union[bytes, str], v: Union[ctypes.c_void_p, ctypes.Array, ctypes.Structure], v_min: float, v_max: float, format: Union[bytes, str], power: float)->bool: ...
def SliderFloat2_2(label: Union[bytes, str], v: ctypes.Array, v_min: float, v_max: float, format: Union[bytes, str], power: float)->bool: ...
def SliderFloat3_2(label: Union[bytes, str], v: ctypes.Array, v_min: float, v_max: float, format: Union[bytes, str], power: float)->bool: ...
def SliderFloat4_2(label: Union[bytes, str], v: ctypes.Array, v_min: float, v_max: float, format: Union[bytes, str], power: float)->bool: ...
def BeginPopupContextWindow_2(str_id: Union[bytes, str], mb: int, over_items: bool)->bool: ...
def TreeAdvanceToLabelPos()->None: ...
def SetNextTreeNodeOpen(open: bool, cond: int= 0)->None: ...
def GetContentRegionAvailWidth()->float: ...
def ImFileDialog_SetTextureCallback(on_create, on_delete)->None: ...
def ImFileDialog_Open(_id: Union[bytes, str], title: Union[bytes, str], filter: Union[bytes, str])->None: ...
def ImFileDialog_GetResult(_id: Union[bytes, str])->string: ...
