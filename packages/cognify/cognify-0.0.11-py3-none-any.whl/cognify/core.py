# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_core.ipynb (unless otherwise specified).

__all__ = ['eeglab_to_mne', 'mne_to_eeglab', 'plot_erp', 'calc_sps', 'plot_sps', 'calc_time_frequency',
           'plot_time_frequency', 'plot_eeg', 'plot_eeg_domain']

# Cell
from .dataset import *
import mne
from oct2py import octave
import matplotlib.pyplot as plt
import numpy as np
from scipy.fft import fft, ifft
from mne.time_frequency import psd_welch

# Cell
def eeglab_to_mne(eeg):
    data = eeg["data"].transpose(2, 0, 1) # [c, p, t] => [t, c, p]
    ch_names = [f"EEG {i}" for i in range(eeg["nbchan"])]
    sfreq = eeg["srate"]
    info = mne.create_info(ch_names, sfreq, ch_types='eeg')
    return mne.EpochsArray(data, info)

# Cell
def mne_to_eeglab(raw):
    if raw.get_data().ndim == 2: # Raw
        epochs = mne.make_fixed_length_epochs(raw, duration=2.0)
    elif raw.get_data().ndim == 3: # Epochs
        epochs = raw
    data = epochs.get_data().transpose(1, 2, 0)  # -> [channels, points, trials]
    channels, points, trials = data.shape
    return {"srate": epochs.info["sfreq"], "data": data, "pnts": points, "trials": trials, "times": epochs.times, "nbchan": channels}

# Cell
def plot_erp(EEG, ch_idx=0):
    data = EEG['data']
    times = EEG['times']
    erp = np.mean(data[ch_idx], axis=-1)
    plt.plot(times, data[ch_idx])
    plt.plot(times, erp, label="ERP", color="k")
    plt.legend()
    plt.xlabel("Time (s)")
    plt.ylabel("Activity")
    plt.title(f'ERP for channel: {ch_idx}')
    plt.show()

# Cell
def calc_sps(EEG, ch_idx=0):
    data, sfreq, points = EEG['data'], EEG['srate'], EEG['pnts']
    if data.ndim == 3:
        cpx = fft(data[ch_idx], axis=0)
        pw = np.mean((2*np.abs(cpx/points))**2, axis=-1)
    else:
        print("Needs to be 3-d array")
        return
    freqs = np.linspace(0, sfreq, points)
    return freqs, pw

# Cell
def plot_sps(EEG, ch_idx=0, ylim=False):
    freqs, pw = calc_sps(EEG, ch_idx)
    plt.plot(freqs, pw)
    plt.xlim(0, 40)
    if ylim: plt.ylim(0, .001)
    plt.title(f'Static Power Spectrum: (ch {ch_idx})')
    plt.xlabel('Frequency (Hz)')
    plt.ylabel('Power')
    plt.show()

# Cell
octave.addpath('../octave/');

# Cell
# TODO: fix calculations
def calc_time_frequency(EEG, ch_idx=0):
    # 2-30Hz and 40 steps
    freqs = np.linspace(2, 30, 40)
    # n wavelet cycles: 3 to 10
    waves = 2 * (np.linspace(3, 10, len(freqs)) / (2*np.pi*freqs)) ** 2

    # setup wavelet and convolution parameters
    wavet = np.arange(-2, 2, 1/EEG['srate'])
    half_w = int(np.floor(len(wavet)/2))
    n_conv = EEG['pnts'] * EEG['trials'] + len(wavet)

    # spectrum of data
    ch_data = EEG['data'][ch_idx].reshape((1, -1))
    data_x = fft(ch_data, n_conv)

    def calc_power(freq):
        # create wavelet
        wave_x = fft(np.exp(2*1j*np.pi*freqs[freq]*wavet)*np.exp(-wavet**2/waves[freq]), n_conv)
        wave_x = wave_x / np.max(wave_x) # normalize

        # convolve
        amps = ifft(wave_x * data_x).flatten()
        amps = amps[half_w:-half_w].reshape((EEG['pnts'], EEG['trials'])) # trim and reshape
        return np.mean(np.abs(amps), 1)

    # initialize time-frequency matrix
    tf = np.zeros((len(freqs), EEG['pnts']))
    for idx, _ in enumerate(freqs):
        tf[idx, :] = calc_power(idx)

    return freqs, tf

# Cell
def plot_time_frequency(EEG, ch_idx=0):
    times = EEG['times']
    # TODO: fix
    freqs, _ = calc_time_frequency(EEG, ch_idx)
    tf = octave.time_frequency(EEG)
    plt.contourf(times, freqs, tf, 40, cmap=None)

# Cell
def plot_eeg(EEG, ch_idx=0, ylim=False):
    data, times = EEG['data'], EEG['times']
    _, (ax1) = plt.subplots(1, 1, figsize=(20, 3))
    _, (ax2, ax3) = plt.subplots(1, 2, figsize=(20, 3))


    # ERP
    erp = np.mean(data[ch_idx], axis=-1) # average over trials
    ax1.plot(times, data[ch_idx])
    ax1.plot(times, erp, label='ERP', color='k')
    ax1.legend()
    ax1.set_xlabel('Time (s)')
    ax1.set_ylabel('Activity')
    ax1.set_title(f'ERP for channel: {ch_idx}')

    # Static Power Spectrum
    freqs, pw = calc_sps(EEG, ch_idx)
    ax2.plot(freqs, pw)
    ax2.set_xlim(0, 40) # limit to 40Hz
    if ylim: ax2.set_ylim(0, .001)
    ax2.set_title('Static Power Spectrum')
    ax2.set_xlabel('Frequency (Hz)')
    ax2.set_ylabel('Power')

    freqs, _ = calc_time_frequency(EEG, ch_idx)
    tf = octave.time_frequency(EEG)
    ax3.contourf(times, freqs, tf, 40)
    ax3.set_title('Time-frequency plot')
    ax3.set_xlabel('Time')
    ax3.set_ylabel('Frequency (Hz')

# Cell
def plot_eeg_domain(epochs, picks=None, fmin=1, fmax=30):
    _, (ax1) = plt.subplots(1, 1, figsize=(20, 3))
    _, (ax2, ax3) = plt.subplots(1, 2, figsize=(20, 5))

    # ERP
    epochs.average(picks=picks).plot(axes=ax1, show=False)

    # Static Power Spectrum
    psds, freqs = psd_welch(epochs, fmin=1, fmax=fmax)
    ax2.plot(freqs, np.mean(psds, axis=(0,1)))
    ax2.set_title("Static Power Spectrum")

    # Time-Frequency
    n_cycles = freqs / 2.
    power, itc = tfr_morlet(epochs, freqs, n_cycles, use_fft=True)

    power.plot(picks=picks, axes=ax3, show=False)
    ax3.set_title("Time-Frequency")

    mne.viz.tight_layout()
    plt.show()