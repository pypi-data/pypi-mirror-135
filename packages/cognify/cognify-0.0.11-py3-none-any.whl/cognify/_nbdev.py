# AUTOGENERATED BY NBDEV! DO NOT EDIT!

__all__ = ["index", "modules", "custom_doc_links", "git_url"]

index = {"eeglab_to_mne": "00_core.ipynb",
         "mne_to_eeglab": "00_core.ipynb",
         "plot_erp": "00_core.ipynb",
         "calc_sps": "00_core.ipynb",
         "plot_sps": "00_core.ipynb",
         "calc_time_frequency": "00_core.ipynb",
         "plot_time_frequency": "00_core.ipynb",
         "plot_eeg": "00_core.ipynb",
         "plot_eeg_domain": "00_core.ipynb",
         "config": "01_dataset.ipynb",
         "cfg_db": "01_dataset.ipynb",
         "user": "01_dataset.ipynb",
         "password": "01_dataset.ipynb",
         "host": "01_dataset.ipynb",
         "port": "01_dataset.ipynb",
         "mydb": "01_dataset.ipynb",
         "get_connection": "01_dataset.ipynb",
         "get_data": "01_dataset.ipynb",
         "query_sessions": "01_dataset.ipynb",
         "get_timestamps": "01_dataset.ipynb",
         "get_unique_timestamps": "01_dataset.ipynb",
         "print_info": "01_dataset.ipynb",
         "parse_channel": "01_dataset.ipynb",
         "biometric_to_df": "01_dataset.ipynb",
         "muse_channels": "01_dataset.ipynb",
         "nexus_channels": "01_dataset.ipynb",
         "muse_sampling_rate": "01_dataset.ipynb",
         "nexus_sampling_rate": "01_dataset.ipynb",
         "query_eeg": "10_api.ipynb",
         "eeg_to_df": "01_dataset.ipynb",
         "df_to_mne": "01_dataset.ipynb",
         "dpath": "01_dataset.ipynb",
         "fetch_eeg": "01_dataset.ipynb",
         "get_eeg": "01_dataset.ipynb",
         "ppg_names": "01_dataset.ipynb",
         "get_ppg": "01_dataset.ipynb",
         "get_ppg_timestamp": "01_dataset.ipynb",
         "parse_ppg": "01_dataset.ipynb",
         "ppg_to_df": "01_dataset.ipynb",
         "get_telemetry": "01_dataset.ipynb",
         "get_task": "01_dataset.ipynb",
         "print_task_info": "01_dataset.ipynb",
         "sync_nback_task": "01_dataset.ipynb",
         "get_user_tasks": "01_dataset.ipynb",
         "detect_eyeblinks": "02_preprocess.ipynb",
         "sfreq": "02_preprocess.ipynb",
         "order": "02_preprocess.ipynb",
         "butter_bandpass": "02_preprocess.ipynb",
         "apply_preprocessing": "02_preprocess.ipynb",
         "filter_trials": "02_preprocess.ipynb",
         "bands": "03_spectra.ipynb",
         "calc_psd": "03_spectra.ipynb",
         "plot_psds": "03_spectra.ipynb",
         "plot_psd_mt": "03_spectra.ipynb",
         "calc_bands": "03_spectra.ipynb",
         "stat": "03_spectra.ipynb",
         "calc_gfp": "03_spectra.ipynb",
         "plot_gfp": "03_spectra.ipynb",
         "bandpower": "03_spectra.ipynb",
         "calc_bandpowers": "03_spectra.ipynb",
         "calc_ch_bands": "03_spectra.ipynb",
         "calc_epoch_bands": "03_spectra.ipynb",
         "plot_welch": "03_spectra.ipynb",
         "calc_tfr": "03_spectra.ipynb",
         "calc_csd": "03_spectra.ipynb",
         "min_max_norm": "04_metric.ipynb",
         "plot_metric": "04_metric.ipynb",
         "calm": "04_metric.ipynb",
         "engagement": "04_metric.ipynb",
         "engagement_1": "04_metric.ipynb",
         "concentration": "04_metric.ipynb",
         "fatigue": "04_metric.ipynb",
         "fatigue_1": "04_metric.ipynb",
         "calc_band_metrics": "04_metric.ipynb",
         "plot_ch": "05_report.ipynb",
         "ch_report": "05_report.ipynb",
         "timefreq_report": "05_report.ipynb",
         "coherence_report": "05_report.ipynb",
         "relative_power": "06_cognitive.ipynb",
         "normalize_df": "06_cognitive.ipynb",
         "interm_shannon": "06_cognitive.ipynb",
         "interm_reny": "06_cognitive.ipynb",
         "interm_tsallis": "06_cognitive.ipynb",
         "shannon_entropy": "06_cognitive.ipynb",
         "renyi_entropy": "06_cognitive.ipynb",
         "tsallis_entropy": "06_cognitive.ipynb",
         "running_mean_uniform_filter1d": "06_cognitive.ipynb",
         "running_mean_convolve": "06_cognitive.ipynb",
         "running_mean_cumsum": "06_cognitive.ipynb",
         "get_cognitive_scores": "06_cognitive.ipynb",
         "cognitive_scores_to_json": "06_cognitive.ipynb",
         "get_hr": "07_heartrate.ipynb",
         "get_raw": "09_optoceutics.ipynb",
         "correct_time": "09_optoceutics.ipynb",
         "ms_to_datetime": "09_optoceutics.ipynb",
         "get_time_range": "09_optoceutics.ipynb",
         "decompose": "09_optoceutics.ipynb",
         "API": "10_api.ipynb",
         "login": "10_api.ipynb",
         "API.login": "10_api.ipynb",
         "query_tasks": "09_optoceutics.ipynb",
         "API.query_tasks": "09_optoceutics.ipynb",
         "split_test": "09_optoceutics.ipynb",
         "parse_test": "09_optoceutics.ipynb",
         "parse_block": "09_optoceutics.ipynb",
         "parse_task": "09_optoceutics.ipynb",
         "parse_tasks": "09_optoceutics.ipynb",
         "get_session_time_range": "09_optoceutics.ipynb",
         "select_sessions": "09_optoceutics.ipynb",
         "query_eeg_ids": "10_api.ipynb",
         "API.query_eeg_ids": "10_api.ipynb",
         "API.query_eeg": "10_api.ipynb",
         "eeg_query": "10_api.ipynb",
         "run_query": "10_api.ipynb",
         "parse_eeg_query": "10_api.ipynb",
         "query_eeg_opt": "10_api.ipynb",
         "API.query_eeg_opt": "10_api.ipynb",
         "gen_white": "11_simulate.ipynb",
         "gen_uni": "11_simulate.ipynb",
         "create_EEG": "11_simulate.ipynb",
         "amp_spectrum": "11_simulate.ipynb",
         "generate_pink_noise": "11_simulate.ipynb",
         "create_ongoing_stationary": "11_simulate.ipynb",
         "create_ongoing": "11_simulate.ipynb"}

modules = ["core.py",
           "dataset.py",
           "dataset_prisma.py",
           "preprocess.py",
           "spectra.py",
           "metric.py",
           "report.py",
           "cognitive.py",
           "heartrate.py",
           "summary.py",
           "optoceutics.py",
           "api.py",
           "simulate.py"]

doc_url = "https://insai.github.io/cognify/"

git_url = "https://github.com/insai/cognify/tree/master/"

def custom_doc_links(name): return None
