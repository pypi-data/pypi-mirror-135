# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/02_preprocess.ipynb (unless otherwise specified).

__all__ = ['detect_eyeblinks', 'sfreq', 'order', 'butter_bandpass', 'apply_preprocessing', 'filter_trials']

# Cell
import matplotlib
import scipy.io as sio
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from scipy.signal import butter, filtfilt, find_peaks, sosfiltfilt
import scipy.signal as signal
from scipy.signal import savgol_filter
from scipy.stats import entropy
from sklearn.decomposition import FastICA
from .dataset import *
from .core import *
from .simulate import *
import mne

# Cell
def detect_eyeblinks(raw, ch_name=None):
    ch_name = ch_name if ch_name else raw.ch_names[0]
    events = mne.preprocessing.find_eog_events(raw, ch_name=ch_name)

    # annotations
    onsets = events[:, 0] / raw.info["sfreq"] - 0.25
    durations = [0.5] * len(events)
    descriptions = ["bad blink"] * len(events)
    annotations = mne.Annotations(onsets, durations, descriptions, orig_time=raw.info["meas_date"])

    return annotations, events

# Cell
l_freq, h_freq = 0.1, 40.
sfreq = 256
order = 6

# Cell
def butter_bandpass(data, lowcut=l_freq, highcut=h_freq, fs=sfreq, order=order):
    nyq = 0.5 * fs
    low = lowcut / nyq
    high = highcut / nyq
    sos = butter(order, [low, high], analog=False, btype="bandpass", output="sos")
    return np.array([sosfiltfilt(sos, c) for c in data])

# Cell
def apply_preprocessing(raw, events, reject=True, h_freq=50.):
    raw.filter(l_freq=0.5, h_freq=h_freq)

    # detect eye-blinks
    blink_annot, blink_events = detect_eyeblinks(raw)
    raw.set_annotations(blink_annot)

    if reject:
        # set EEG amplitude ranges
        reject_criteria = dict(eeg=100e-6)  # 100 µV
        flat_criteria = dict(eeg=1e-6)  # 1 µV
        tmin, tmax = -0.2, 0.5

        epochs = mne.Epochs(raw, events, tmin=tmin, tmax=tmax,
                            reject_tmax=0, reject=reject_criteria,
                            flat=flat_criteria, reject_by_annotation=True,
                            preload=True)
    else:
        epochs = mne.Epochs(raw, events, reject_by_annotation=True, preload=True)

    # set reference
    epochs.set_eeg_reference(ref_channels='average')

    return epochs

# Cell
def filter_trials(eeg, trials, trial_length=800, padding=50):
    _, channels = eeg.shape
    window = trial_length - padding * 2
    data = np.zeros((len(trials), trial_length, channels))
    for c in range(channels):
        x = eeg[:, c]
        for i, t in enumerate(trials):
            trial = x[t : t + window]
            trial = trial - np.mean(trial)  # sub trial mean
            trial = trial / np.linalg.norm(trial)  # normalize with frobenius norm
            trial = np.multiply(trial, np.hanning(window))  # multiply by hanning window taber
            trial = np.pad(trial, padding, "constant")  # add constant padding
            trial = savgol_filter(trial, window + 1, 3)  # savgol filter
            data[i, :, c] = trial
    return data