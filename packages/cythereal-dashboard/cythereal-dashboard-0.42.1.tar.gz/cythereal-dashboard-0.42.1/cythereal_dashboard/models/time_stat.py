# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 0.42.1
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TimeStat(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service': 'str',
        'count': 'int',
        'mean': 'float',
        'std': 'float',
        'min': 'float',
        'max': 'float',
        'top_quarter': 'float',
        'top_half': 'float',
        'top_three_quarters': 'float'
    }

    attribute_map = {
        'service': 'service',
        'count': 'count',
        'mean': 'mean',
        'std': 'std',
        'min': 'min',
        'max': 'max',
        'top_quarter': 'top_quarter',
        'top_half': 'top_half',
        'top_three_quarters': 'top_three_quarters'
    }

    def __init__(self, service=None, count=None, mean=None, std=None, min=None, max=None, top_quarter=None, top_half=None, top_three_quarters=None):  # noqa: E501
        """TimeStat - a model defined in Swagger"""  # noqa: E501

        self._service = None
        self._count = None
        self._mean = None
        self._std = None
        self._min = None
        self._max = None
        self._top_quarter = None
        self._top_half = None
        self._top_three_quarters = None
        self.discriminator = None

        if service is not None:
            self.service = service
        if count is not None:
            self.count = count
        if mean is not None:
            self.mean = mean
        if std is not None:
            self.std = std
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max
        if top_quarter is not None:
            self.top_quarter = top_quarter
        if top_half is not None:
            self.top_half = top_half
        if top_three_quarters is not None:
            self.top_three_quarters = top_three_quarters

    @property
    def service(self):
        """Gets the service of this TimeStat.  # noqa: E501


        :return: The service of this TimeStat.  # noqa: E501
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this TimeStat.


        :param service: The service of this TimeStat.  # noqa: E501
        :type: str
        """

        self._service = service

    @property
    def count(self):
        """Gets the count of this TimeStat.  # noqa: E501


        :return: The count of this TimeStat.  # noqa: E501
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TimeStat.


        :param count: The count of this TimeStat.  # noqa: E501
        :type: int
        """

        self._count = count

    @property
    def mean(self):
        """Gets the mean of this TimeStat.  # noqa: E501


        :return: The mean of this TimeStat.  # noqa: E501
        :rtype: float
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this TimeStat.


        :param mean: The mean of this TimeStat.  # noqa: E501
        :type: float
        """

        self._mean = mean

    @property
    def std(self):
        """Gets the std of this TimeStat.  # noqa: E501


        :return: The std of this TimeStat.  # noqa: E501
        :rtype: float
        """
        return self._std

    @std.setter
    def std(self, std):
        """Sets the std of this TimeStat.


        :param std: The std of this TimeStat.  # noqa: E501
        :type: float
        """

        self._std = std

    @property
    def min(self):
        """Gets the min of this TimeStat.  # noqa: E501


        :return: The min of this TimeStat.  # noqa: E501
        :rtype: float
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this TimeStat.


        :param min: The min of this TimeStat.  # noqa: E501
        :type: float
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this TimeStat.  # noqa: E501


        :return: The max of this TimeStat.  # noqa: E501
        :rtype: float
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this TimeStat.


        :param max: The max of this TimeStat.  # noqa: E501
        :type: float
        """

        self._max = max

    @property
    def top_quarter(self):
        """Gets the top_quarter of this TimeStat.  # noqa: E501


        :return: The top_quarter of this TimeStat.  # noqa: E501
        :rtype: float
        """
        return self._top_quarter

    @top_quarter.setter
    def top_quarter(self, top_quarter):
        """Sets the top_quarter of this TimeStat.


        :param top_quarter: The top_quarter of this TimeStat.  # noqa: E501
        :type: float
        """

        self._top_quarter = top_quarter

    @property
    def top_half(self):
        """Gets the top_half of this TimeStat.  # noqa: E501


        :return: The top_half of this TimeStat.  # noqa: E501
        :rtype: float
        """
        return self._top_half

    @top_half.setter
    def top_half(self, top_half):
        """Sets the top_half of this TimeStat.


        :param top_half: The top_half of this TimeStat.  # noqa: E501
        :type: float
        """

        self._top_half = top_half

    @property
    def top_three_quarters(self):
        """Gets the top_three_quarters of this TimeStat.  # noqa: E501


        :return: The top_three_quarters of this TimeStat.  # noqa: E501
        :rtype: float
        """
        return self._top_three_quarters

    @top_three_quarters.setter
    def top_three_quarters(self, top_three_quarters):
        """Sets the top_three_quarters of this TimeStat.


        :param top_three_quarters: The top_three_quarters of this TimeStat.  # noqa: E501
        :type: float
        """

        self._top_three_quarters = top_three_quarters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeStat, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeStat):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
