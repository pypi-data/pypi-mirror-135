# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 0.42.1
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class HTMLObject(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sha1': 'Sha1',
        'sha256': 'Sha256',
        'sha512': 'Sha512',
        'md5': 'Md5',
        'unix_file_type': 'Filetype',
        'object_class': 'ObjectClass',
        'filename': 'Filename',
        'first_seen': 'Timestamp',
        'is_owned': 'IsOwned',
        'is_public': 'IsPublic',
        'category': 'Category',
        'categories': 'Categories',
        'family': 'Family',
        'families': 'Families',
        'unmapped': 'Unmapped',
        'labels': 'OldCategories',
        'tags': 'Tags',
        'tokens': 'Tokens',
        'detection_stats': 'DetectionStats',
        'av_names': 'AvNames',
        'num_matches': 'NumMatches',
        'body': 'str'
    }

    attribute_map = {
        'sha1': 'sha1',
        'sha256': 'sha256',
        'sha512': 'sha512',
        'md5': 'md5',
        'unix_file_type': 'unix_file_type',
        'object_class': 'object_class',
        'filename': 'filename',
        'first_seen': 'first_seen',
        'is_owned': 'is_owned',
        'is_public': 'is_public',
        'category': 'category',
        'categories': 'categories',
        'family': 'family',
        'families': 'families',
        'unmapped': 'unmapped',
        'labels': 'labels',
        'tags': 'tags',
        'tokens': 'tokens',
        'detection_stats': 'detection_stats',
        'av_names': 'av_names',
        'num_matches': 'num_matches',
        'body': 'body'
    }

    def __init__(self, sha1=None, sha256=None, sha512=None, md5=None, unix_file_type=None, object_class=None, filename=None, first_seen=None, is_owned=None, is_public=None, category=None, categories=None, family=None, families=None, unmapped=None, labels=None, tags=None, tokens=None, detection_stats=None, av_names=None, num_matches=None, body=None):  # noqa: E501
        """HTMLObject - a model defined in Swagger"""  # noqa: E501

        self._sha1 = None
        self._sha256 = None
        self._sha512 = None
        self._md5 = None
        self._unix_file_type = None
        self._object_class = None
        self._filename = None
        self._first_seen = None
        self._is_owned = None
        self._is_public = None
        self._category = None
        self._categories = None
        self._family = None
        self._families = None
        self._unmapped = None
        self._labels = None
        self._tags = None
        self._tokens = None
        self._detection_stats = None
        self._av_names = None
        self._num_matches = None
        self._body = None
        self.discriminator = None

        if sha1 is not None:
            self.sha1 = sha1
        if sha256 is not None:
            self.sha256 = sha256
        if sha512 is not None:
            self.sha512 = sha512
        if md5 is not None:
            self.md5 = md5
        if unix_file_type is not None:
            self.unix_file_type = unix_file_type
        if object_class is not None:
            self.object_class = object_class
        if filename is not None:
            self.filename = filename
        if first_seen is not None:
            self.first_seen = first_seen
        if is_owned is not None:
            self.is_owned = is_owned
        if is_public is not None:
            self.is_public = is_public
        if category is not None:
            self.category = category
        if categories is not None:
            self.categories = categories
        if family is not None:
            self.family = family
        if families is not None:
            self.families = families
        if unmapped is not None:
            self.unmapped = unmapped
        if labels is not None:
            self.labels = labels
        if tags is not None:
            self.tags = tags
        if tokens is not None:
            self.tokens = tokens
        if detection_stats is not None:
            self.detection_stats = detection_stats
        if av_names is not None:
            self.av_names = av_names
        if num_matches is not None:
            self.num_matches = num_matches
        if body is not None:
            self.body = body

    @property
    def sha1(self):
        """Gets the sha1 of this HTMLObject.  # noqa: E501


        :return: The sha1 of this HTMLObject.  # noqa: E501
        :rtype: Sha1
        """
        return self._sha1

    @sha1.setter
    def sha1(self, sha1):
        """Sets the sha1 of this HTMLObject.


        :param sha1: The sha1 of this HTMLObject.  # noqa: E501
        :type: Sha1
        """

        self._sha1 = sha1

    @property
    def sha256(self):
        """Gets the sha256 of this HTMLObject.  # noqa: E501


        :return: The sha256 of this HTMLObject.  # noqa: E501
        :rtype: Sha256
        """
        return self._sha256

    @sha256.setter
    def sha256(self, sha256):
        """Sets the sha256 of this HTMLObject.


        :param sha256: The sha256 of this HTMLObject.  # noqa: E501
        :type: Sha256
        """

        self._sha256 = sha256

    @property
    def sha512(self):
        """Gets the sha512 of this HTMLObject.  # noqa: E501


        :return: The sha512 of this HTMLObject.  # noqa: E501
        :rtype: Sha512
        """
        return self._sha512

    @sha512.setter
    def sha512(self, sha512):
        """Sets the sha512 of this HTMLObject.


        :param sha512: The sha512 of this HTMLObject.  # noqa: E501
        :type: Sha512
        """

        self._sha512 = sha512

    @property
    def md5(self):
        """Gets the md5 of this HTMLObject.  # noqa: E501


        :return: The md5 of this HTMLObject.  # noqa: E501
        :rtype: Md5
        """
        return self._md5

    @md5.setter
    def md5(self, md5):
        """Sets the md5 of this HTMLObject.


        :param md5: The md5 of this HTMLObject.  # noqa: E501
        :type: Md5
        """

        self._md5 = md5

    @property
    def unix_file_type(self):
        """Gets the unix_file_type of this HTMLObject.  # noqa: E501


        :return: The unix_file_type of this HTMLObject.  # noqa: E501
        :rtype: Filetype
        """
        return self._unix_file_type

    @unix_file_type.setter
    def unix_file_type(self, unix_file_type):
        """Sets the unix_file_type of this HTMLObject.


        :param unix_file_type: The unix_file_type of this HTMLObject.  # noqa: E501
        :type: Filetype
        """

        self._unix_file_type = unix_file_type

    @property
    def object_class(self):
        """Gets the object_class of this HTMLObject.  # noqa: E501


        :return: The object_class of this HTMLObject.  # noqa: E501
        :rtype: ObjectClass
        """
        return self._object_class

    @object_class.setter
    def object_class(self, object_class):
        """Sets the object_class of this HTMLObject.


        :param object_class: The object_class of this HTMLObject.  # noqa: E501
        :type: ObjectClass
        """

        self._object_class = object_class

    @property
    def filename(self):
        """Gets the filename of this HTMLObject.  # noqa: E501


        :return: The filename of this HTMLObject.  # noqa: E501
        :rtype: Filename
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this HTMLObject.


        :param filename: The filename of this HTMLObject.  # noqa: E501
        :type: Filename
        """

        self._filename = filename

    @property
    def first_seen(self):
        """Gets the first_seen of this HTMLObject.  # noqa: E501


        :return: The first_seen of this HTMLObject.  # noqa: E501
        :rtype: Timestamp
        """
        return self._first_seen

    @first_seen.setter
    def first_seen(self, first_seen):
        """Sets the first_seen of this HTMLObject.


        :param first_seen: The first_seen of this HTMLObject.  # noqa: E501
        :type: Timestamp
        """

        self._first_seen = first_seen

    @property
    def is_owned(self):
        """Gets the is_owned of this HTMLObject.  # noqa: E501


        :return: The is_owned of this HTMLObject.  # noqa: E501
        :rtype: IsOwned
        """
        return self._is_owned

    @is_owned.setter
    def is_owned(self, is_owned):
        """Sets the is_owned of this HTMLObject.


        :param is_owned: The is_owned of this HTMLObject.  # noqa: E501
        :type: IsOwned
        """

        self._is_owned = is_owned

    @property
    def is_public(self):
        """Gets the is_public of this HTMLObject.  # noqa: E501


        :return: The is_public of this HTMLObject.  # noqa: E501
        :rtype: IsPublic
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this HTMLObject.


        :param is_public: The is_public of this HTMLObject.  # noqa: E501
        :type: IsPublic
        """

        self._is_public = is_public

    @property
    def category(self):
        """Gets the category of this HTMLObject.  # noqa: E501


        :return: The category of this HTMLObject.  # noqa: E501
        :rtype: Category
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this HTMLObject.


        :param category: The category of this HTMLObject.  # noqa: E501
        :type: Category
        """

        self._category = category

    @property
    def categories(self):
        """Gets the categories of this HTMLObject.  # noqa: E501


        :return: The categories of this HTMLObject.  # noqa: E501
        :rtype: Categories
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this HTMLObject.


        :param categories: The categories of this HTMLObject.  # noqa: E501
        :type: Categories
        """

        self._categories = categories

    @property
    def family(self):
        """Gets the family of this HTMLObject.  # noqa: E501


        :return: The family of this HTMLObject.  # noqa: E501
        :rtype: Family
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this HTMLObject.


        :param family: The family of this HTMLObject.  # noqa: E501
        :type: Family
        """

        self._family = family

    @property
    def families(self):
        """Gets the families of this HTMLObject.  # noqa: E501


        :return: The families of this HTMLObject.  # noqa: E501
        :rtype: Families
        """
        return self._families

    @families.setter
    def families(self, families):
        """Sets the families of this HTMLObject.


        :param families: The families of this HTMLObject.  # noqa: E501
        :type: Families
        """

        self._families = families

    @property
    def unmapped(self):
        """Gets the unmapped of this HTMLObject.  # noqa: E501


        :return: The unmapped of this HTMLObject.  # noqa: E501
        :rtype: Unmapped
        """
        return self._unmapped

    @unmapped.setter
    def unmapped(self, unmapped):
        """Sets the unmapped of this HTMLObject.


        :param unmapped: The unmapped of this HTMLObject.  # noqa: E501
        :type: Unmapped
        """

        self._unmapped = unmapped

    @property
    def labels(self):
        """Gets the labels of this HTMLObject.  # noqa: E501


        :return: The labels of this HTMLObject.  # noqa: E501
        :rtype: OldCategories
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this HTMLObject.


        :param labels: The labels of this HTMLObject.  # noqa: E501
        :type: OldCategories
        """

        self._labels = labels

    @property
    def tags(self):
        """Gets the tags of this HTMLObject.  # noqa: E501


        :return: The tags of this HTMLObject.  # noqa: E501
        :rtype: Tags
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this HTMLObject.


        :param tags: The tags of this HTMLObject.  # noqa: E501
        :type: Tags
        """

        self._tags = tags

    @property
    def tokens(self):
        """Gets the tokens of this HTMLObject.  # noqa: E501


        :return: The tokens of this HTMLObject.  # noqa: E501
        :rtype: Tokens
        """
        return self._tokens

    @tokens.setter
    def tokens(self, tokens):
        """Sets the tokens of this HTMLObject.


        :param tokens: The tokens of this HTMLObject.  # noqa: E501
        :type: Tokens
        """

        self._tokens = tokens

    @property
    def detection_stats(self):
        """Gets the detection_stats of this HTMLObject.  # noqa: E501


        :return: The detection_stats of this HTMLObject.  # noqa: E501
        :rtype: DetectionStats
        """
        return self._detection_stats

    @detection_stats.setter
    def detection_stats(self, detection_stats):
        """Sets the detection_stats of this HTMLObject.


        :param detection_stats: The detection_stats of this HTMLObject.  # noqa: E501
        :type: DetectionStats
        """

        self._detection_stats = detection_stats

    @property
    def av_names(self):
        """Gets the av_names of this HTMLObject.  # noqa: E501


        :return: The av_names of this HTMLObject.  # noqa: E501
        :rtype: AvNames
        """
        return self._av_names

    @av_names.setter
    def av_names(self, av_names):
        """Sets the av_names of this HTMLObject.


        :param av_names: The av_names of this HTMLObject.  # noqa: E501
        :type: AvNames
        """

        self._av_names = av_names

    @property
    def num_matches(self):
        """Gets the num_matches of this HTMLObject.  # noqa: E501


        :return: The num_matches of this HTMLObject.  # noqa: E501
        :rtype: NumMatches
        """
        return self._num_matches

    @num_matches.setter
    def num_matches(self, num_matches):
        """Sets the num_matches of this HTMLObject.


        :param num_matches: The num_matches of this HTMLObject.  # noqa: E501
        :type: NumMatches
        """

        self._num_matches = num_matches

    @property
    def body(self):
        """Gets the body of this HTMLObject.  # noqa: E501


        :return: The body of this HTMLObject.  # noqa: E501
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this HTMLObject.


        :param body: The body of this HTMLObject.  # noqa: E501
        :type: str
        """

        self._body = body

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HTMLObject, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HTMLObject):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
