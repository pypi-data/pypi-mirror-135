# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 0.42.1
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class QuarantineDataListInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sha1': 'Sha1',
        'from_addr': 'str',
        'to_addr': 'str',
        'subject': 'str',
        'department_list': 'list[str]',
        'date_received': 'str',
        'ioc_objects': 'list[str]',
        'attachments': 'list[QuarantineDataListInnerAttachments]',
        'quarantine_status': 'str',
        'inferred_threat': 'str'
    }

    attribute_map = {
        'sha1': 'sha1',
        'from_addr': 'from_addr',
        'to_addr': 'to_addr',
        'subject': 'subject',
        'department_list': 'department_list',
        'date_received': 'date_received',
        'ioc_objects': 'ioc_objects',
        'attachments': 'attachments',
        'quarantine_status': 'quarantine_status',
        'inferred_threat': 'inferred_threat'
    }

    def __init__(self, sha1=None, from_addr=None, to_addr=None, subject=None, department_list=None, date_received=None, ioc_objects=None, attachments=None, quarantine_status=None, inferred_threat=None):  # noqa: E501
        """QuarantineDataListInner - a model defined in Swagger"""  # noqa: E501

        self._sha1 = None
        self._from_addr = None
        self._to_addr = None
        self._subject = None
        self._department_list = None
        self._date_received = None
        self._ioc_objects = None
        self._attachments = None
        self._quarantine_status = None
        self._inferred_threat = None
        self.discriminator = None

        if sha1 is not None:
            self.sha1 = sha1
        if from_addr is not None:
            self.from_addr = from_addr
        if to_addr is not None:
            self.to_addr = to_addr
        if subject is not None:
            self.subject = subject
        if department_list is not None:
            self.department_list = department_list
        if date_received is not None:
            self.date_received = date_received
        if ioc_objects is not None:
            self.ioc_objects = ioc_objects
        if attachments is not None:
            self.attachments = attachments
        if quarantine_status is not None:
            self.quarantine_status = quarantine_status
        if inferred_threat is not None:
            self.inferred_threat = inferred_threat

    @property
    def sha1(self):
        """Gets the sha1 of this QuarantineDataListInner.  # noqa: E501


        :return: The sha1 of this QuarantineDataListInner.  # noqa: E501
        :rtype: Sha1
        """
        return self._sha1

    @sha1.setter
    def sha1(self, sha1):
        """Sets the sha1 of this QuarantineDataListInner.


        :param sha1: The sha1 of this QuarantineDataListInner.  # noqa: E501
        :type: Sha1
        """

        self._sha1 = sha1

    @property
    def from_addr(self):
        """Gets the from_addr of this QuarantineDataListInner.  # noqa: E501

        The receiver of the email  # noqa: E501

        :return: The from_addr of this QuarantineDataListInner.  # noqa: E501
        :rtype: str
        """
        return self._from_addr

    @from_addr.setter
    def from_addr(self, from_addr):
        """Sets the from_addr of this QuarantineDataListInner.

        The receiver of the email  # noqa: E501

        :param from_addr: The from_addr of this QuarantineDataListInner.  # noqa: E501
        :type: str
        """
        if from_addr is not None and not re.search(r'.+@.+', from_addr):  # noqa: E501
            raise ValueError(r"Invalid value for `from_addr`, must be a follow pattern or equal to `/.+@.+/`")  # noqa: E501

        self._from_addr = from_addr

    @property
    def to_addr(self):
        """Gets the to_addr of this QuarantineDataListInner.  # noqa: E501

        The sender of the email  # noqa: E501

        :return: The to_addr of this QuarantineDataListInner.  # noqa: E501
        :rtype: str
        """
        return self._to_addr

    @to_addr.setter
    def to_addr(self, to_addr):
        """Sets the to_addr of this QuarantineDataListInner.

        The sender of the email  # noqa: E501

        :param to_addr: The to_addr of this QuarantineDataListInner.  # noqa: E501
        :type: str
        """
        if to_addr is not None and not re.search(r'.+@.+', to_addr):  # noqa: E501
            raise ValueError(r"Invalid value for `to_addr`, must be a follow pattern or equal to `/.+@.+/`")  # noqa: E501

        self._to_addr = to_addr

    @property
    def subject(self):
        """Gets the subject of this QuarantineDataListInner.  # noqa: E501

        The subject of the email  # noqa: E501

        :return: The subject of this QuarantineDataListInner.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this QuarantineDataListInner.

        The subject of the email  # noqa: E501

        :param subject: The subject of this QuarantineDataListInner.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def department_list(self):
        """Gets the department_list of this QuarantineDataListInner.  # noqa: E501

        The departments that this email was after  # noqa: E501

        :return: The department_list of this QuarantineDataListInner.  # noqa: E501
        :rtype: list[str]
        """
        return self._department_list

    @department_list.setter
    def department_list(self, department_list):
        """Sets the department_list of this QuarantineDataListInner.

        The departments that this email was after  # noqa: E501

        :param department_list: The department_list of this QuarantineDataListInner.  # noqa: E501
        :type: list[str]
        """

        self._department_list = department_list

    @property
    def date_received(self):
        """Gets the date_received of this QuarantineDataListInner.  # noqa: E501

        The date an email was sent  # noqa: E501

        :return: The date_received of this QuarantineDataListInner.  # noqa: E501
        :rtype: str
        """
        return self._date_received

    @date_received.setter
    def date_received(self, date_received):
        """Sets the date_received of this QuarantineDataListInner.

        The date an email was sent  # noqa: E501

        :param date_received: The date_received of this QuarantineDataListInner.  # noqa: E501
        :type: str
        """

        self._date_received = date_received

    @property
    def ioc_objects(self):
        """Gets the ioc_objects of this QuarantineDataListInner.  # noqa: E501


        :return: The ioc_objects of this QuarantineDataListInner.  # noqa: E501
        :rtype: list[str]
        """
        return self._ioc_objects

    @ioc_objects.setter
    def ioc_objects(self, ioc_objects):
        """Sets the ioc_objects of this QuarantineDataListInner.


        :param ioc_objects: The ioc_objects of this QuarantineDataListInner.  # noqa: E501
        :type: list[str]
        """

        self._ioc_objects = ioc_objects

    @property
    def attachments(self):
        """Gets the attachments of this QuarantineDataListInner.  # noqa: E501


        :return: The attachments of this QuarantineDataListInner.  # noqa: E501
        :rtype: list[QuarantineDataListInnerAttachments]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this QuarantineDataListInner.


        :param attachments: The attachments of this QuarantineDataListInner.  # noqa: E501
        :type: list[QuarantineDataListInnerAttachments]
        """

        self._attachments = attachments

    @property
    def quarantine_status(self):
        """Gets the quarantine_status of this QuarantineDataListInner.  # noqa: E501

        Whether the email is quarantined, deleted, pushed, etc.  # noqa: E501

        :return: The quarantine_status of this QuarantineDataListInner.  # noqa: E501
        :rtype: str
        """
        return self._quarantine_status

    @quarantine_status.setter
    def quarantine_status(self, quarantine_status):
        """Sets the quarantine_status of this QuarantineDataListInner.

        Whether the email is quarantined, deleted, pushed, etc.  # noqa: E501

        :param quarantine_status: The quarantine_status of this QuarantineDataListInner.  # noqa: E501
        :type: str
        """

        self._quarantine_status = quarantine_status

    @property
    def inferred_threat(self):
        """Gets the inferred_threat of this QuarantineDataListInner.  # noqa: E501

        The inferred threat for the email  # noqa: E501

        :return: The inferred_threat of this QuarantineDataListInner.  # noqa: E501
        :rtype: str
        """
        return self._inferred_threat

    @inferred_threat.setter
    def inferred_threat(self, inferred_threat):
        """Sets the inferred_threat of this QuarantineDataListInner.

        The inferred threat for the email  # noqa: E501

        :param inferred_threat: The inferred_threat of this QuarantineDataListInner.  # noqa: E501
        :type: str
        """

        self._inferred_threat = inferred_threat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuarantineDataListInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuarantineDataListInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
