# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 0.42.1
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CeleryLogsInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'str',
        'host': 'str',
        'level': 'str',
        'message': 'str',
        'job_id': 'str',
        'task_name': 'str',
        'current_task': 'str'
    }

    attribute_map = {
        'time': 'time',
        'host': 'host',
        'level': 'level',
        'message': 'message',
        'job_id': 'job_id',
        'task_name': 'task_name',
        'current_task': 'current_task'
    }

    def __init__(self, time=None, host=None, level=None, message=None, job_id=None, task_name=None, current_task=None):  # noqa: E501
        """CeleryLogsInner - a model defined in Swagger"""  # noqa: E501

        self._time = None
        self._host = None
        self._level = None
        self._message = None
        self._job_id = None
        self._task_name = None
        self._current_task = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if host is not None:
            self.host = host
        if level is not None:
            self.level = level
        if message is not None:
            self.message = message
        if job_id is not None:
            self.job_id = job_id
        if task_name is not None:
            self.task_name = task_name
        if current_task is not None:
            self.current_task = current_task

    @property
    def time(self):
        """Gets the time of this CeleryLogsInner.  # noqa: E501


        :return: The time of this CeleryLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this CeleryLogsInner.


        :param time: The time of this CeleryLogsInner.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def host(self):
        """Gets the host of this CeleryLogsInner.  # noqa: E501


        :return: The host of this CeleryLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this CeleryLogsInner.


        :param host: The host of this CeleryLogsInner.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def level(self):
        """Gets the level of this CeleryLogsInner.  # noqa: E501


        :return: The level of this CeleryLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CeleryLogsInner.


        :param level: The level of this CeleryLogsInner.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def message(self):
        """Gets the message of this CeleryLogsInner.  # noqa: E501


        :return: The message of this CeleryLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CeleryLogsInner.


        :param message: The message of this CeleryLogsInner.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def job_id(self):
        """Gets the job_id of this CeleryLogsInner.  # noqa: E501


        :return: The job_id of this CeleryLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this CeleryLogsInner.


        :param job_id: The job_id of this CeleryLogsInner.  # noqa: E501
        :type: str
        """

        self._job_id = job_id

    @property
    def task_name(self):
        """Gets the task_name of this CeleryLogsInner.  # noqa: E501


        :return: The task_name of this CeleryLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._task_name

    @task_name.setter
    def task_name(self, task_name):
        """Sets the task_name of this CeleryLogsInner.


        :param task_name: The task_name of this CeleryLogsInner.  # noqa: E501
        :type: str
        """

        self._task_name = task_name

    @property
    def current_task(self):
        """Gets the current_task of this CeleryLogsInner.  # noqa: E501


        :return: The current_task of this CeleryLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._current_task

    @current_task.setter
    def current_task(self, current_task):
        """Sets the current_task of this CeleryLogsInner.


        :param current_task: The current_task of this CeleryLogsInner.  # noqa: E501
        :type: str
        """

        self._current_task = current_task

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CeleryLogsInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CeleryLogsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
