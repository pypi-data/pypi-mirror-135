# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 0.37.1
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NginxLogsInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'str',
        'host': 'str',
        'key': 'str',
        'request': 'str',
        'request_length': 'str',
        'request_time': 'str',
        'status': 'int',
        'scheme': 'str',
        'remote_user': 'str',
        'remote_port': 'str',
        'remote_addr': 'str',
        'http_user_agent': 'str',
        'http_referrer': 'str',
        'http_host': 'str',
        'connection_requests': 'int',
        'bytes_sent': 'int',
        'body_bytes_sent': 'int',
        'upstream': 'str',
        'upstream_response_length': 'int',
        'upstream_response_time': 'float',
        'upstream_header_time': 'float',
        'upstream_connect_time': 'float',
        'upstream_cache_status': 'str'
    }

    attribute_map = {
        'time': 'time',
        'host': 'host',
        'key': 'key',
        'request': 'request',
        'request_length': 'request_length',
        'request_time': 'request_time',
        'status': 'status',
        'scheme': 'scheme',
        'remote_user': 'remote_user',
        'remote_port': 'remote_port',
        'remote_addr': 'remote_addr',
        'http_user_agent': 'http_user_agent',
        'http_referrer': 'http_referrer',
        'http_host': 'http_host',
        'connection_requests': 'connection_requests',
        'bytes_sent': 'bytes_sent',
        'body_bytes_sent': 'body_bytes_sent',
        'upstream': 'upstream',
        'upstream_response_length': 'upstream_response_length',
        'upstream_response_time': 'upstream_response_time',
        'upstream_header_time': 'upstream_header_time',
        'upstream_connect_time': 'upstream_connect_time',
        'upstream_cache_status': 'upstream_cache_status'
    }

    def __init__(self, time=None, host=None, key=None, request=None, request_length=None, request_time=None, status=None, scheme=None, remote_user=None, remote_port=None, remote_addr=None, http_user_agent=None, http_referrer=None, http_host=None, connection_requests=None, bytes_sent=None, body_bytes_sent=None, upstream=None, upstream_response_length=None, upstream_response_time=None, upstream_header_time=None, upstream_connect_time=None, upstream_cache_status=None):  # noqa: E501
        """NginxLogsInner - a model defined in Swagger"""  # noqa: E501

        self._time = None
        self._host = None
        self._key = None
        self._request = None
        self._request_length = None
        self._request_time = None
        self._status = None
        self._scheme = None
        self._remote_user = None
        self._remote_port = None
        self._remote_addr = None
        self._http_user_agent = None
        self._http_referrer = None
        self._http_host = None
        self._connection_requests = None
        self._bytes_sent = None
        self._body_bytes_sent = None
        self._upstream = None
        self._upstream_response_length = None
        self._upstream_response_time = None
        self._upstream_header_time = None
        self._upstream_connect_time = None
        self._upstream_cache_status = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if host is not None:
            self.host = host
        if key is not None:
            self.key = key
        if request is not None:
            self.request = request
        if request_length is not None:
            self.request_length = request_length
        if request_time is not None:
            self.request_time = request_time
        if status is not None:
            self.status = status
        if scheme is not None:
            self.scheme = scheme
        if remote_user is not None:
            self.remote_user = remote_user
        if remote_port is not None:
            self.remote_port = remote_port
        if remote_addr is not None:
            self.remote_addr = remote_addr
        if http_user_agent is not None:
            self.http_user_agent = http_user_agent
        if http_referrer is not None:
            self.http_referrer = http_referrer
        if http_host is not None:
            self.http_host = http_host
        if connection_requests is not None:
            self.connection_requests = connection_requests
        if bytes_sent is not None:
            self.bytes_sent = bytes_sent
        if body_bytes_sent is not None:
            self.body_bytes_sent = body_bytes_sent
        if upstream is not None:
            self.upstream = upstream
        if upstream_response_length is not None:
            self.upstream_response_length = upstream_response_length
        if upstream_response_time is not None:
            self.upstream_response_time = upstream_response_time
        if upstream_header_time is not None:
            self.upstream_header_time = upstream_header_time
        if upstream_connect_time is not None:
            self.upstream_connect_time = upstream_connect_time
        if upstream_cache_status is not None:
            self.upstream_cache_status = upstream_cache_status

    @property
    def time(self):
        """Gets the time of this NginxLogsInner.  # noqa: E501


        :return: The time of this NginxLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this NginxLogsInner.


        :param time: The time of this NginxLogsInner.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def host(self):
        """Gets the host of this NginxLogsInner.  # noqa: E501


        :return: The host of this NginxLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this NginxLogsInner.


        :param host: The host of this NginxLogsInner.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def key(self):
        """Gets the key of this NginxLogsInner.  # noqa: E501


        :return: The key of this NginxLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this NginxLogsInner.


        :param key: The key of this NginxLogsInner.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def request(self):
        """Gets the request of this NginxLogsInner.  # noqa: E501


        :return: The request of this NginxLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._request

    @request.setter
    def request(self, request):
        """Sets the request of this NginxLogsInner.


        :param request: The request of this NginxLogsInner.  # noqa: E501
        :type: str
        """

        self._request = request

    @property
    def request_length(self):
        """Gets the request_length of this NginxLogsInner.  # noqa: E501


        :return: The request_length of this NginxLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._request_length

    @request_length.setter
    def request_length(self, request_length):
        """Sets the request_length of this NginxLogsInner.


        :param request_length: The request_length of this NginxLogsInner.  # noqa: E501
        :type: str
        """

        self._request_length = request_length

    @property
    def request_time(self):
        """Gets the request_time of this NginxLogsInner.  # noqa: E501


        :return: The request_time of this NginxLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._request_time

    @request_time.setter
    def request_time(self, request_time):
        """Sets the request_time of this NginxLogsInner.


        :param request_time: The request_time of this NginxLogsInner.  # noqa: E501
        :type: str
        """

        self._request_time = request_time

    @property
    def status(self):
        """Gets the status of this NginxLogsInner.  # noqa: E501


        :return: The status of this NginxLogsInner.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NginxLogsInner.


        :param status: The status of this NginxLogsInner.  # noqa: E501
        :type: int
        """

        self._status = status

    @property
    def scheme(self):
        """Gets the scheme of this NginxLogsInner.  # noqa: E501


        :return: The scheme of this NginxLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this NginxLogsInner.


        :param scheme: The scheme of this NginxLogsInner.  # noqa: E501
        :type: str
        """

        self._scheme = scheme

    @property
    def remote_user(self):
        """Gets the remote_user of this NginxLogsInner.  # noqa: E501


        :return: The remote_user of this NginxLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._remote_user

    @remote_user.setter
    def remote_user(self, remote_user):
        """Sets the remote_user of this NginxLogsInner.


        :param remote_user: The remote_user of this NginxLogsInner.  # noqa: E501
        :type: str
        """

        self._remote_user = remote_user

    @property
    def remote_port(self):
        """Gets the remote_port of this NginxLogsInner.  # noqa: E501


        :return: The remote_port of this NginxLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._remote_port

    @remote_port.setter
    def remote_port(self, remote_port):
        """Sets the remote_port of this NginxLogsInner.


        :param remote_port: The remote_port of this NginxLogsInner.  # noqa: E501
        :type: str
        """

        self._remote_port = remote_port

    @property
    def remote_addr(self):
        """Gets the remote_addr of this NginxLogsInner.  # noqa: E501


        :return: The remote_addr of this NginxLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._remote_addr

    @remote_addr.setter
    def remote_addr(self, remote_addr):
        """Sets the remote_addr of this NginxLogsInner.


        :param remote_addr: The remote_addr of this NginxLogsInner.  # noqa: E501
        :type: str
        """

        self._remote_addr = remote_addr

    @property
    def http_user_agent(self):
        """Gets the http_user_agent of this NginxLogsInner.  # noqa: E501


        :return: The http_user_agent of this NginxLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._http_user_agent

    @http_user_agent.setter
    def http_user_agent(self, http_user_agent):
        """Sets the http_user_agent of this NginxLogsInner.


        :param http_user_agent: The http_user_agent of this NginxLogsInner.  # noqa: E501
        :type: str
        """

        self._http_user_agent = http_user_agent

    @property
    def http_referrer(self):
        """Gets the http_referrer of this NginxLogsInner.  # noqa: E501


        :return: The http_referrer of this NginxLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._http_referrer

    @http_referrer.setter
    def http_referrer(self, http_referrer):
        """Sets the http_referrer of this NginxLogsInner.


        :param http_referrer: The http_referrer of this NginxLogsInner.  # noqa: E501
        :type: str
        """

        self._http_referrer = http_referrer

    @property
    def http_host(self):
        """Gets the http_host of this NginxLogsInner.  # noqa: E501


        :return: The http_host of this NginxLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._http_host

    @http_host.setter
    def http_host(self, http_host):
        """Sets the http_host of this NginxLogsInner.


        :param http_host: The http_host of this NginxLogsInner.  # noqa: E501
        :type: str
        """

        self._http_host = http_host

    @property
    def connection_requests(self):
        """Gets the connection_requests of this NginxLogsInner.  # noqa: E501


        :return: The connection_requests of this NginxLogsInner.  # noqa: E501
        :rtype: int
        """
        return self._connection_requests

    @connection_requests.setter
    def connection_requests(self, connection_requests):
        """Sets the connection_requests of this NginxLogsInner.


        :param connection_requests: The connection_requests of this NginxLogsInner.  # noqa: E501
        :type: int
        """

        self._connection_requests = connection_requests

    @property
    def bytes_sent(self):
        """Gets the bytes_sent of this NginxLogsInner.  # noqa: E501


        :return: The bytes_sent of this NginxLogsInner.  # noqa: E501
        :rtype: int
        """
        return self._bytes_sent

    @bytes_sent.setter
    def bytes_sent(self, bytes_sent):
        """Sets the bytes_sent of this NginxLogsInner.


        :param bytes_sent: The bytes_sent of this NginxLogsInner.  # noqa: E501
        :type: int
        """

        self._bytes_sent = bytes_sent

    @property
    def body_bytes_sent(self):
        """Gets the body_bytes_sent of this NginxLogsInner.  # noqa: E501


        :return: The body_bytes_sent of this NginxLogsInner.  # noqa: E501
        :rtype: int
        """
        return self._body_bytes_sent

    @body_bytes_sent.setter
    def body_bytes_sent(self, body_bytes_sent):
        """Sets the body_bytes_sent of this NginxLogsInner.


        :param body_bytes_sent: The body_bytes_sent of this NginxLogsInner.  # noqa: E501
        :type: int
        """

        self._body_bytes_sent = body_bytes_sent

    @property
    def upstream(self):
        """Gets the upstream of this NginxLogsInner.  # noqa: E501


        :return: The upstream of this NginxLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._upstream

    @upstream.setter
    def upstream(self, upstream):
        """Sets the upstream of this NginxLogsInner.


        :param upstream: The upstream of this NginxLogsInner.  # noqa: E501
        :type: str
        """

        self._upstream = upstream

    @property
    def upstream_response_length(self):
        """Gets the upstream_response_length of this NginxLogsInner.  # noqa: E501


        :return: The upstream_response_length of this NginxLogsInner.  # noqa: E501
        :rtype: int
        """
        return self._upstream_response_length

    @upstream_response_length.setter
    def upstream_response_length(self, upstream_response_length):
        """Sets the upstream_response_length of this NginxLogsInner.


        :param upstream_response_length: The upstream_response_length of this NginxLogsInner.  # noqa: E501
        :type: int
        """

        self._upstream_response_length = upstream_response_length

    @property
    def upstream_response_time(self):
        """Gets the upstream_response_time of this NginxLogsInner.  # noqa: E501


        :return: The upstream_response_time of this NginxLogsInner.  # noqa: E501
        :rtype: float
        """
        return self._upstream_response_time

    @upstream_response_time.setter
    def upstream_response_time(self, upstream_response_time):
        """Sets the upstream_response_time of this NginxLogsInner.


        :param upstream_response_time: The upstream_response_time of this NginxLogsInner.  # noqa: E501
        :type: float
        """

        self._upstream_response_time = upstream_response_time

    @property
    def upstream_header_time(self):
        """Gets the upstream_header_time of this NginxLogsInner.  # noqa: E501


        :return: The upstream_header_time of this NginxLogsInner.  # noqa: E501
        :rtype: float
        """
        return self._upstream_header_time

    @upstream_header_time.setter
    def upstream_header_time(self, upstream_header_time):
        """Sets the upstream_header_time of this NginxLogsInner.


        :param upstream_header_time: The upstream_header_time of this NginxLogsInner.  # noqa: E501
        :type: float
        """

        self._upstream_header_time = upstream_header_time

    @property
    def upstream_connect_time(self):
        """Gets the upstream_connect_time of this NginxLogsInner.  # noqa: E501


        :return: The upstream_connect_time of this NginxLogsInner.  # noqa: E501
        :rtype: float
        """
        return self._upstream_connect_time

    @upstream_connect_time.setter
    def upstream_connect_time(self, upstream_connect_time):
        """Sets the upstream_connect_time of this NginxLogsInner.


        :param upstream_connect_time: The upstream_connect_time of this NginxLogsInner.  # noqa: E501
        :type: float
        """

        self._upstream_connect_time = upstream_connect_time

    @property
    def upstream_cache_status(self):
        """Gets the upstream_cache_status of this NginxLogsInner.  # noqa: E501


        :return: The upstream_cache_status of this NginxLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._upstream_cache_status

    @upstream_cache_status.setter
    def upstream_cache_status(self, upstream_cache_status):
        """Sets the upstream_cache_status of this NginxLogsInner.


        :param upstream_cache_status: The upstream_cache_status of this NginxLogsInner.  # noqa: E501
        :type: str
        """

        self._upstream_cache_status = upstream_cache_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NginxLogsInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NginxLogsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
