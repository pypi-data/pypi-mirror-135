# coding: utf-8

"""
    Cythereal Dashboard API

     The API used exclusively by the MAGIC Dashboard for populating charts, graphs, tables, etc... on the dashboard.  # API Conventions  **All responses** MUST be of type `APIResponse` and contain the following fields:  * `api_version` |  The current api version * `success` | Boolean value indicating if the operation succeeded. * `code` | Status code. Typically corresponds to the HTTP status code.  * `message` | A human readable message providing more details about the operation. Can be null or empty.  **Successful operations** MUST return a `SuccessResponse`, which extends `APIResponse` by adding:  * `data` | Properties containing the response object. * `success` | MUST equal True  When returning objects from a successful response, the `data` object SHOULD contain a property named after the requested object type. For example, the `/alerts` endpoint should return a response object with `data.alerts`. This property SHOULD  contain a list of the returned objects. For the `/alerts` endpoint, the `data.alerts` property contains a list of MagicAlerts objects. See the `/alerts` endpoint documentation for an example.  **Failed Operations** MUST return an `ErrorResponse`, which extends `APIResponse` by adding:  * `success` | MUST equal False.   # noqa: E501

    OpenAPI spec version: 0.42.1
    Contact: support@cythereal.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DjangoLogsInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time': 'str',
        'host': 'str',
        'level': 'str',
        'version_hash': 'str',
        'message': 'str',
        'user': 'str',
        'group': 'str',
        'impersonated': 'str',
        'type': 'str',
        'method': 'str',
        'uri': 'str',
        'full_path': 'str',
        'ip': 'str',
        'referer': 'str',
        'user_agent': 'str',
        'code': 'int'
    }

    attribute_map = {
        'time': 'time',
        'host': 'host',
        'level': 'level',
        'version_hash': 'version_hash',
        'message': 'message',
        'user': 'user',
        'group': 'group',
        'impersonated': 'impersonated',
        'type': 'type',
        'method': 'method',
        'uri': 'uri',
        'full_path': 'full_path',
        'ip': 'ip',
        'referer': 'referer',
        'user_agent': 'user_agent',
        'code': 'code'
    }

    def __init__(self, time=None, host=None, level=None, version_hash=None, message=None, user=None, group=None, impersonated=None, type=None, method=None, uri=None, full_path=None, ip=None, referer=None, user_agent=None, code=None):  # noqa: E501
        """DjangoLogsInner - a model defined in Swagger"""  # noqa: E501

        self._time = None
        self._host = None
        self._level = None
        self._version_hash = None
        self._message = None
        self._user = None
        self._group = None
        self._impersonated = None
        self._type = None
        self._method = None
        self._uri = None
        self._full_path = None
        self._ip = None
        self._referer = None
        self._user_agent = None
        self._code = None
        self.discriminator = None

        if time is not None:
            self.time = time
        if host is not None:
            self.host = host
        if level is not None:
            self.level = level
        if version_hash is not None:
            self.version_hash = version_hash
        if message is not None:
            self.message = message
        if user is not None:
            self.user = user
        if group is not None:
            self.group = group
        if impersonated is not None:
            self.impersonated = impersonated
        if type is not None:
            self.type = type
        if method is not None:
            self.method = method
        if uri is not None:
            self.uri = uri
        if full_path is not None:
            self.full_path = full_path
        if ip is not None:
            self.ip = ip
        if referer is not None:
            self.referer = referer
        if user_agent is not None:
            self.user_agent = user_agent
        if code is not None:
            self.code = code

    @property
    def time(self):
        """Gets the time of this DjangoLogsInner.  # noqa: E501


        :return: The time of this DjangoLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DjangoLogsInner.


        :param time: The time of this DjangoLogsInner.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def host(self):
        """Gets the host of this DjangoLogsInner.  # noqa: E501


        :return: The host of this DjangoLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """Sets the host of this DjangoLogsInner.


        :param host: The host of this DjangoLogsInner.  # noqa: E501
        :type: str
        """

        self._host = host

    @property
    def level(self):
        """Gets the level of this DjangoLogsInner.  # noqa: E501


        :return: The level of this DjangoLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this DjangoLogsInner.


        :param level: The level of this DjangoLogsInner.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def version_hash(self):
        """Gets the version_hash of this DjangoLogsInner.  # noqa: E501


        :return: The version_hash of this DjangoLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._version_hash

    @version_hash.setter
    def version_hash(self, version_hash):
        """Sets the version_hash of this DjangoLogsInner.


        :param version_hash: The version_hash of this DjangoLogsInner.  # noqa: E501
        :type: str
        """

        self._version_hash = version_hash

    @property
    def message(self):
        """Gets the message of this DjangoLogsInner.  # noqa: E501


        :return: The message of this DjangoLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this DjangoLogsInner.


        :param message: The message of this DjangoLogsInner.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def user(self):
        """Gets the user of this DjangoLogsInner.  # noqa: E501


        :return: The user of this DjangoLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DjangoLogsInner.


        :param user: The user of this DjangoLogsInner.  # noqa: E501
        :type: str
        """

        self._user = user

    @property
    def group(self):
        """Gets the group of this DjangoLogsInner.  # noqa: E501


        :return: The group of this DjangoLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this DjangoLogsInner.


        :param group: The group of this DjangoLogsInner.  # noqa: E501
        :type: str
        """

        self._group = group

    @property
    def impersonated(self):
        """Gets the impersonated of this DjangoLogsInner.  # noqa: E501


        :return: The impersonated of this DjangoLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._impersonated

    @impersonated.setter
    def impersonated(self, impersonated):
        """Sets the impersonated of this DjangoLogsInner.


        :param impersonated: The impersonated of this DjangoLogsInner.  # noqa: E501
        :type: str
        """

        self._impersonated = impersonated

    @property
    def type(self):
        """Gets the type of this DjangoLogsInner.  # noqa: E501


        :return: The type of this DjangoLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DjangoLogsInner.


        :param type: The type of this DjangoLogsInner.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def method(self):
        """Gets the method of this DjangoLogsInner.  # noqa: E501


        :return: The method of this DjangoLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this DjangoLogsInner.


        :param method: The method of this DjangoLogsInner.  # noqa: E501
        :type: str
        """

        self._method = method

    @property
    def uri(self):
        """Gets the uri of this DjangoLogsInner.  # noqa: E501


        :return: The uri of this DjangoLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri):
        """Sets the uri of this DjangoLogsInner.


        :param uri: The uri of this DjangoLogsInner.  # noqa: E501
        :type: str
        """

        self._uri = uri

    @property
    def full_path(self):
        """Gets the full_path of this DjangoLogsInner.  # noqa: E501


        :return: The full_path of this DjangoLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._full_path

    @full_path.setter
    def full_path(self, full_path):
        """Sets the full_path of this DjangoLogsInner.


        :param full_path: The full_path of this DjangoLogsInner.  # noqa: E501
        :type: str
        """

        self._full_path = full_path

    @property
    def ip(self):
        """Gets the ip of this DjangoLogsInner.  # noqa: E501


        :return: The ip of this DjangoLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this DjangoLogsInner.


        :param ip: The ip of this DjangoLogsInner.  # noqa: E501
        :type: str
        """

        self._ip = ip

    @property
    def referer(self):
        """Gets the referer of this DjangoLogsInner.  # noqa: E501


        :return: The referer of this DjangoLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._referer

    @referer.setter
    def referer(self, referer):
        """Sets the referer of this DjangoLogsInner.


        :param referer: The referer of this DjangoLogsInner.  # noqa: E501
        :type: str
        """

        self._referer = referer

    @property
    def user_agent(self):
        """Gets the user_agent of this DjangoLogsInner.  # noqa: E501


        :return: The user_agent of this DjangoLogsInner.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this DjangoLogsInner.


        :param user_agent: The user_agent of this DjangoLogsInner.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def code(self):
        """Gets the code of this DjangoLogsInner.  # noqa: E501


        :return: The code of this DjangoLogsInner.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DjangoLogsInner.


        :param code: The code of this DjangoLogsInner.  # noqa: E501
        :type: int
        """

        self._code = code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DjangoLogsInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DjangoLogsInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
