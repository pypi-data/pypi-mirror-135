Metadata-Version: 2.1
Name: vegafusion-jupyter
Version: 0.0.1a1
Summary: Altair Jupyter Widget library that relies on VegaFusion for serverside calculations
Home-page: https://github.com/jonmmease/vegafusion
Author: Jon Mease
Author-email: jonmmease@gmail.com
License: AGPL-3.0-or-later
Keywords: Jupyter,Widgets,IPython
Platform: Linux
Platform: Mac OS X
Platform: Windows
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: BSD License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Framework :: Jupyter
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE.txt
Requires-Dist: ipywidgets (>=7.0.0)
Requires-Dist: altair (>=4.2.0)
Requires-Dist: vegafusion-python
Requires-Dist: pyarrow (>=6)
Provides-Extra: docs
Provides-Extra: examples
Provides-Extra: test

## Development Installation

Create a dev environment. The general approach here is that we use conda to install development dependencies from
conda-forge, and then rely on the specifications in setup.py to handle the python runtime and test dependencies.

The development dependencies from conda-forge are managed with conda and [conda-lock](https://github.com/conda-incubator/conda-lock).
All you need is conda (or mamba) to start, `conda-lock` will be installed with the command below.

Feel free to change `vegafusion_jupyter_dev` to an environment name of your choosing, but make sure to change it in both commands
```bash
conda create --name vegafusion_jupyter_dev --file conda-linux-64-3.10.lock
conda activate vegafusion_jupyter_dev
```

Now add a development install of the `vegafusion-python` package. This is a native Python package written in Rust.

```
maturin develop --release
```

## install wasm-pack
Install wasm-pack

```
cargo install wasm-pack
```

Build vegafusion-wasm npm package

```
cd vegafusion-wasm
wasm-pack build --release
```

install runtime and test dependencies

```
cd python/vegafusion_jupyter
pip install -e ".[test]"
```

## Making a change to development environment requirements

 1. Edit the dev-environment-3.X.yml file
 2. Update lock files with
```
$ conda-lock -f dev-environment-3.7.yml -p osx-64 -p linux-64 -p win-64 -k env --filename-template "conda-{platform}-3.7.lock"
$ conda-lock -f dev-environment-3.10.yml -p osx-64 -p linux-64 -p win-64 -k env --filename-template "conda-{platform}-3.10.lock"
```
 3. Update existing conda environment with `conda env update --file conda-linux-64.lock.yml --prune`, 

Note: `--prune` only handles removing transitive dependencies that are no longer needed. If a package is dropped from
`dev-environment.yml`, it will need to be manually removed with `conda`. 

----

Autogenerated below

https://github.com/jtpio/jupyterlab-wasm-example

# vegafusion

[![Build Status](https://travis-ci.org/jonmmease/vegafusion.svg?branch=master)](https://travis-ci.org/jonmmease/vegafusion_jupyter)
[![codecov](https://codecov.io/gh/jonmmease/vegafusion/branch/master/graph/badge.svg)](https://codecov.io/gh/jonmmease/vegafusion)


Altair Jupyter Widget library that relies on VegaFusion for serverside calculations

## Installation

You can install using `pip`:

```bash
pip install vegafusion_jupyter
```

If you are using Jupyter Notebook 5.2 or earlier, you may also need to enable
the nbextension:
```bash
jupyter nbextension enable --py [--sys-prefix|--user|--system] vegafusion_jupyter
```

## Development Installation

Create a dev environment:
```bash
conda create -n vegafusion_jupyter-dev -c conda-forge nodejs yarn python jupyterlab
conda activate vegafusion_jupyter-dev
```

Install the python. This will also build the TS package.
```bash
pip install -e ".[test, examples]"
```

When developing your extensions, you need to manually enable your extensions with the
notebook / lab frontend. For lab, this is done by the command:

```
jupyter labextension develop --overwrite .
yarn run build
```

For classic notebook, you need to run:

```
jupyter nbextension install --sys-prefix --symlink --overwrite --py vegafusion_jupyter
jupyter nbextension enable --sys-prefix --py vegafusion_jupyter
```

Note that the `--symlink` flag doesn't work on Windows, so you will here have to run
the `install` command every time that you rebuild your extension. For certain installations
you might also need another flag instead of `--sys-prefix`, but we won't cover the meaning
of those flags here.

### How to see your changes
#### Typescript:
If you use JupyterLab to develop then you can watch the source directory and run JupyterLab at the same time in different
terminals to watch for changes in the extension's source and automatically rebuild the widget.

```bash
# Watch the source directory in one terminal, automatically rebuilding when needed
yarn run watch
# Run JupyterLab in another terminal
jupyter lab
```

After a change wait for the build to finish and then refresh your browser and the changes should take effect.

#### Python:
If you make a change to the python code then you will need to restart the notebook kernel to have it take effect.


