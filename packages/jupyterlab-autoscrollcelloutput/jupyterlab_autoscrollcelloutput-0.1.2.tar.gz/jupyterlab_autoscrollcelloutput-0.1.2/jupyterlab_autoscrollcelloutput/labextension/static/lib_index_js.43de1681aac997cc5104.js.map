{"version":3,"file":"lib_index_js.43de1681aac997cc5104.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAwD;AACH;AACO;AACnB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+DAAa;AACxC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,mBAAmB,kEAAkB,SAAS,mBAAmB;AACjE;AACA;AACA;AACA;AACA;AACA,QAAQ,uDAAI;AACZ,qCAAqC,4DAAa;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,uDAAQ;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C;AAC5C,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jupyterlab_autoscrollcelloutput/./lib/index.js"],"sourcesContent":["import { DisposableDelegate } from '@lumino/disposable';\r\nimport { ToolbarButton } from '@jupyterlab/apputils';\r\nimport { CodeCellModel, CodeCell } from '@jupyterlab/cells';\r\nimport { each } from '@lumino/algorithm';\r\n/**\r\n * Initialization data for the jupyterlab_autoscrollcelloutput extension.\r\n */\r\nconst plugin = {\r\n    id: 'jupyterlab_autoscrollcelloutput:plugin',\r\n    autoStart: true,\r\n    activate: (app) => {\r\n        console.log('JupyterLab extension jupyterlab_autoscrollcelloutput is activated!');\r\n        app.docRegistry.addWidgetExtension('Notebook', {\r\n            createNew: (panel, context) => {\r\n                return new ButtonAutoScrollCellOutput().init(panel);\r\n            }\r\n        });\r\n    }\r\n};\r\nclass ButtonAutoScrollCellOutput {\r\n    init(panel) {\r\n        const triggerAutoScrollCellOutput = () => {\r\n            if (SET) {\r\n                SET = false;\r\n                console.log('Extension jupyterlab_autoscrollcelloutput disabled for notebook:', panel.id);\r\n                if (button.hasClass('selected'))\r\n                    button.removeClass('selected');\r\n            }\r\n            else {\r\n                SET = true;\r\n                console.log('Extension jupyterlab_autoscrollcelloutput enabled for notebook:', panel.id);\r\n                button.addClass('selected');\r\n            }\r\n            this.notebook.model.metadata.set('autoscrollcelloutput', SET);\r\n        };\r\n        const button = new ToolbarButton({\r\n            className: 'buttonAutoScrollCellOuput',\r\n            iconClass: 'wll-ScrollIcon',\r\n            label: 'scroll',\r\n            onClick: triggerAutoScrollCellOutput,\r\n            tooltip: 'Auto Scroll Cell Ouput'\r\n        });\r\n        panel.toolbar.insertItem(10, 'AutoScrollCellOutput', button);\r\n        this.notebook = panel.content;\r\n        var SET = true;\r\n        button.addClass('selected');\r\n        this.notebook.model.cells.changed.connect(this.onCellsChanged, this);\r\n        return new DisposableDelegate(() => { button.dispose(); });\r\n    }\r\n    onCellsChanged(cells, changed_cells) {\r\n        // If new cells added\r\n        // if (changed_cells.type == 'add') {\r\n        // Go through all cells\r\n        each(changed_cells.newValues, (cellModel, idx) => {\r\n            if (cellModel instanceof CodeCellModel) {\r\n                // Detect output changes\r\n                cellModel.outputs.changed.connect((output, arg) => {\r\n                    let autoScrollEnabled = this.notebook.model.metadata.get('autoscrollcelloutput');\r\n                    // If the change type is 'set', the output has changed.\r\n                    // Check if scroll and auto scroll is enabled in metadata\r\n                    if (['add', 'set'].includes(arg.type) &&\r\n                        cellModel.metadata.get(\"scrolled\") && autoScrollEnabled) {\r\n                        // Find the widget for the model.\r\n                        //TODO: is there any other method then iteration\r\n                        for (let cell of this.notebook.widgets) {\r\n                            if (cell instanceof CodeCell && cell.model == cellModel) {\r\n                                // Scroll to bottom\r\n                                cell.outputArea.node.scrollTop = cell.outputArea.node.scrollHeight;\r\n                                // Place resize observer for output widgets\r\n                                // for (let widget of (cell as CodeCell).outputArea.widgets) {\r\n                                //     this.resizeObserver.unobserve(widget.node);\r\n                                //     (widget => {\r\n                                //         setTimeout(() => {\r\n                                //             this.resizeObserver.observe(widget.node);\r\n                                //         });\r\n                                //     })(widget);\r\n                                // }\r\n                                // Find output view widgets\r\n                                // this.scrollOutputViews(cell)\r\n                            }\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        // }\r\n    }\r\n}\r\nexport default plugin;\r\n"],"names":[],"sourceRoot":""}