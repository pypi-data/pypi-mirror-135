{"version":3,"file":"lib_widget_js.fd6f21af19df40826804.js","mappings":";;;;;;;;;;;;;AAAA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uGAAuG;AACvG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sFAAsF;AACtF;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yFAAyF;AACzF,SAAS;AACT;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;;;;;;;;;;;;;;;ACpJA;AACA;AACA;AACA,aAAa,mBAAO,CAAC,uCAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;;;;;;;;;;;;;;;;;;;;;;ACfA;AACA;AACsE;AACd;AACxD;AAC4B,CAAC;AACkB;AACN;AACO;AACzC,6BAA6B,iEAAc;AAClD;AACA,6CAA6C,uBAAuB,kXAAkX,oBAAoB,gGAAgG;AAC1iB;AACA;AACA;AACA;AACA;AACA,2BAA2B,uDAAU;AACrC,6CAA6C,EAAE,6EAA0B;AACzE;AACA;AACA;AACA,8BAA8B,iDAAW;AACzC,sCAAsC,oDAAc;AACpD,4CAA4C;AAC5C,6BAA6B,iDAAW,EAAE;AAC1C,qCAAqC,oDAAc;AAC5C,4BAA4B,gEAAa;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,yDAAU;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,qEAAyB;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,cAAc,IAAI,GAAG;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,qCAAqC,IAAI;AACvE;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA,mCAAmC;AACnC,2BAA2B;AAC3B;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,wBAAwB,yDAAa,IAAI;AACzC,4BAA4B,WAAW,oBAAoB,KAAK,eAAe;AAC/E,4BAA4B;AAC5B,4DAA4D;AAC5D;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC3NA;AAC0G;AACjB;AACW;AACpG,8BAA8B,mFAA2B,CAAC,4FAAqC;AAC/F,0BAA0B,qFAAiC;AAC3D;AACA,mDAAmD,kEAAkE;AACrH;AACA,iEAAe,uBAAuB,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRvC,MAA+F;AAC/F,MAAqF;AACrF,MAA4F;AAC5F,MAA+G;AAC/G,MAAwG;AACxG,MAAwG;AACxG,MAAmG;AACnG;AACA;;AAEA;;AAEA,4BAA4B,qGAAmB;AAC/C,wBAAwB,kHAAa;;AAErC,uBAAuB,uGAAa;AACpC;AACA,iBAAiB,+FAAM;AACvB,6BAA6B,sGAAkB;;AAE/C,aAAa,0GAAG,CAAC,sFAAO;;;;AAI6C;AACrE,OAAO,iEAAe,sFAAO,IAAI,6FAAc,GAAG,6FAAc,YAAY,EAAC","sources":["webpack://serialhub/./lib/serialhubport.js","webpack://serialhub/./lib/version.js","webpack://serialhub/./lib/widget.js","webpack://serialhub/./style/index.css","webpack://serialhub/./style/index.css?0140"],"sourcesContent":["// Copyright (c) cdr4eelz\n// Distributed under the terms of the Modified BSD License.\n/* SerilHubPort class to simplify access to WebSerial ports */\nexport class SerialHubPort {\n    constructor() {\n        this.port = null;\n        this.writer = null;\n        this.reader = null;\n    }\n    /* connect the SerialHubPort by requesting and then opening a Web Serial port */\n    async connect(requestOpts, serialOpts) {\n        const NAV = window.navigator;\n        if (!NAV || !NAV.serial) {\n            throw new TypeError('Web Serial API not supported');\n        }\n        if (this.port) {\n            throw new TypeError('WebSerial port is already connected');\n        }\n        const rawPort = await NAV.serial.requestPort(requestOpts);\n        if (!rawPort) {\n            //The requestPort() probably threw error, but in case not...\n            throw new TypeError('FAILED request a port from user');\n        }\n        //TODO: Install an this.ondisconnect(event) handler to rawPort\n        console.log('OPENING PORT:', rawPort, rawPort.getInfo());\n        this.port = rawPort;\n        await this.port.open(serialOpts);\n        //Note that getReader & getWriter \"lock\" the port to the reader\n        this.writer = this.port.writable.getWriter();\n        this.reader = this.port.readable.getReader();\n        console.log('CONNECTED: ', this, this.port, this.port.getInfo());\n        //Let cbConnect initiate this.readLoop(f);\n    }\n    /* disconnect the SerialHubPort by closing the associated Web Serial port */\n    async disconnect() {\n        var _a, _b, _c;\n        console.log('CLOSE: ', this);\n        //TODO: Verify proper closing steps for reader/writer vs the port itself\n        // Helpful hints about closing https://wicg.github.io/serial/#close-method\n        try {\n            //await this.port?.readable?.cancel('Closing port');\n            await ((_a = this.reader) === null || _a === void 0 ? void 0 : _a.cancel('Closing port')); //Should indirectly signal readLoop to terminate\n        }\n        catch (e) {\n            console.error('Ignoring error while closing readable', e);\n            //Ignore exception on reader\n        }\n        finally {\n            this.reader = null;\n        }\n        try {\n            //await this.port?.writable?.abort('Closing port');\n            //await this.writer?.abort('Closing port');\n            await ((_b = this.writer) === null || _b === void 0 ? void 0 : _b.close());\n        }\n        catch (e) {\n            console.error('Ignoring error while closing writable', e);\n            //Ignore exception on writer\n        }\n        finally {\n            this.writer = null;\n        }\n        //Hopefully the above have unlocked the reader/writer of the port???\n        // and allowed the readLoop to fall-through before we close the port.\n        try {\n            await ((_c = this.port) === null || _c === void 0 ? void 0 : _c.close()); //Let exceptions through from here\n        }\n        finally {\n            this.port = null; //But clear this.port reference\n        }\n    }\n    /* writeToStream writes and awaits multiple buffers to the serial port */\n    writeToStream(data) {\n        if (!this.writer) {\n            throw new TypeError('Stream not open');\n        }\n        data.forEach(async (d) => {\n            var _a;\n            //Anonymous function is ASYNC so it can AWAIT the write() call below\n            console.log('[WRITE]', d, d.byteLength);\n            await ((_a = this.writer) === null || _a === void 0 ? void 0 : _a.write(d)); //AWAIT in sequence, to avoid parallel promises\n        });\n        let nWritten = 0;\n        for (const d of data) {\n            nWritten += d.byteLength; //TODO: What about offsets in ArrayBufferView???\n        }\n        console.log('[WROTE]', nWritten);\n        return nWritten;\n    }\n    /* readLoop to be called back to by Web Serial API as data is read from the serial port */\n    async readLoop(cbRead) {\n        var _a;\n        //Possibly \"SerialPort.readable\" goes null if disconnected?\n        while (this.reader && ((_a = this.port) === null || _a === void 0 ? void 0 : _a.readable)) {\n            //TODO: Inner loop for non-fatal errors & re-allocate local reader\n            //console.log('[readLoop] LOOP');\n            const { value, done } = await this.reader.read();\n            if (value) {\n                //console.log('[readLoop] VALUE', value);\n                cbRead(value);\n            }\n            if (done) {\n                console.log('[readLoop] DONE', done);\n                this.reader.releaseLock();\n                break;\n            }\n        }\n        console.log('[readLoop] EXIT');\n    }\n    /* Static function to check if browser supports Web Serial API */\n    static isSupported() {\n        return 'serial' in navigator;\n        /*\n        const NAV: Navigator = window.navigator;\n        if (NAV === undefined || NAV === null) {\n          return false;\n        }\n        const SER: any = (NAV as any).serial;\n        if (SER === undefined || SER === null) {\n          return false;\n        }\n        return true;\n        */\n    }\n    /* createOneHub() is a wrapper around \"new SerialHubPort()\" which\n        attempts to auto-disconnect a prior port so that re-opening\n        has a chance of succeeding.  Otherwise one tends to get a\n        port already open error.\n    */\n    static createOneHub() {\n        const oldSER = window.serPort; //Get prior stashed value\n        if (oldSER) {\n            console.log('Closing left over port', oldSER);\n            try {\n                oldSER.disconnect(); //Dispose of prior \"port\" if passed to us\n            }\n            catch (e) {\n                console.error('Ignoring close error', e);\n            }\n            finally {\n                window.serPort = null;\n            }\n        }\n        const newSHP = new SerialHubPort();\n        window.serPort = newSHP; //Stash in a global location\n        return newSHP;\n    }\n}\n//# sourceMappingURL=serialhubport.js.map","// Copyright (c) cdr4eelz\n// Distributed under the terms of the Modified BSD License.\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst data = require('../package.json');\n/**\n * The _model_module_version/_view_module_version this package implements.\n *\n * The html widget manager assumes that this is the same as the npm package\n * version number.\n */\nexport const MODULE_VERSION = data.version;\n/*\n * The current package name.\n */\nexport const MODULE_NAME = data.name;\n//# sourceMappingURL=version.js.map","// Copyright (c) cdr4eelz\n// Distributed under the terms of the Modified BSD License.\nimport { DOMWidgetModel, DOMWidgetView } from '@jupyter-widgets/base';\nimport { MODULE_NAME, MODULE_VERSION } from './version';\n// Import the CSS\nimport '../style/index.css'; //was '../css/widget.css'\nimport * as utils from '@jupyter-widgets/base';\nimport { UUID } from '@lumino/coreutils';\nimport { SerialHubPort } from './serialhubport';\nexport class SerialHubModel extends DOMWidgetModel {\n    defaults() {\n        return Object.assign(Object.assign({}, super.defaults()), { _model_name: SerialHubModel.model_name, _model_module: SerialHubModel.model_module, _model_module_version: SerialHubModel.model_module_version, _view_name: SerialHubModel.view_name, _view_module: SerialHubModel.view_module, _view_module_version: SerialHubModel.view_module_version, is_supported: false, status: 'Initializing...', value: 'Loading...', request_options: {}, serial_options: {}, pkt_recv_front: [0, 0], pkt_send_front: [0, 0], pkt_recv_back: [0, 0], pkt_send_back: [0, 0] });\n    }\n    static get mytempid() {\n        return SerialHubModel._mytempid;\n    }\n}\nSerialHubModel._mytempid = utils.uuid();\nSerialHubModel.serializers = Object.assign({}, DOMWidgetModel.serializers\n// Add any extra serializers here\n);\nSerialHubModel.model_name = 'SerialHubModel';\nSerialHubModel.model_module = MODULE_NAME;\nSerialHubModel.model_module_version = MODULE_VERSION;\nSerialHubModel.view_name = 'SerialHubView'; // Set to null if no view\nSerialHubModel.view_module = MODULE_NAME; // Set to null if no view\nSerialHubModel.view_module_version = MODULE_VERSION;\nexport class SerialHubView extends DOMWidgetView {\n    constructor() {\n        super(...arguments);\n        this._el_status = null;\n        this._el_prompt = null;\n        this._el_stats = null;\n        this._el_value = null;\n        this._shp = null;\n    }\n    render() {\n        console.log('RENDER serialhub widget');\n        this.el.id = this.id || UUID.uuid4();\n        this.el.classList.add('xx-serialhub-widget');\n        /* Create a couple sub-Elements for our custom widget */\n        this._el_status = window.document.createElement('button');\n        this._el_status.classList.add('xx-serialhub-status');\n        this._el_prompt = window.document.createElement('span');\n        this._el_prompt.classList.add('xx-serialhub-prompt');\n        this._el_stats = window.document.createElement('pre');\n        this._el_stats.classList.add('xx-serialhub-stats');\n        this._el_value = window.document.createElement('pre');\n        this._el_value.classList.add('xx-serialhub-value');\n        /* Click events wrapped to capture \"this\" object */\n        this._el_status.onclick = (ev) => this.click_status(ev);\n        this._el_value.onclick = (ev) => this.click_value(ev);\n        /* Append each of the sub-components to our main widget Element */\n        this.el.append(this._el_status, this._el_prompt, this._el_stats, this._el_value);\n        this.changed_status();\n        this.changed_value();\n        this.changed_stats();\n        this.update_stats_title();\n        this.model.on('change:status', this.changed_status, this);\n        this.model.on('change:value', this.changed_value, this);\n        this.model.on('change:request_options', this.changed_request_options, this);\n        this.model.on('change:serial_options', this.changed_serial_options, this);\n        this.model.on('change:pkt_recv_front', this.changed_stats, this);\n        this.model.on('change:pkt_recv_back', this.changed_stats, this);\n        this.model.on('change:pkt_send_front', this.changed_stats, this);\n        this.model.on('change:pkt_send_back', this.changed_stats, this);\n        this.model.on('msg:custom', this.msg_custom, this);\n        const supported = SerialHubPort.isSupported();\n        this.model.set('is_supported', supported);\n        this.model.set('status', supported ? 'Supported' : 'Unsupported');\n        if (supported) {\n            this._el_prompt.textContent = '<<< Click to connect/disconnect a port';\n        }\n        this.touch();\n        return this;\n    }\n    get_port_options() {\n        return [\n            this.model.get('request_options'),\n            this.model.get('serial_options')\n        ];\n    }\n    update_stats_title() {\n        var _a, _b;\n        const [reqOpts, serOpts] = this.get_port_options();\n        let title = 'Request-Options: ' +\n            JSON.stringify(reqOpts) +\n            '\\r\\nSerial-Options: ' +\n            JSON.stringify(serOpts);\n        const serInfo = (_b = (_a = this._shp) === null || _a === void 0 ? void 0 : _a.port) === null || _b === void 0 ? void 0 : _b.getInfo();\n        if (serInfo) {\n            title += '\\r\\nPort-Info:' + JSON.stringify(serInfo);\n        }\n        if (this._el_prompt) {\n            this._el_prompt.title = title;\n        }\n    }\n    changed_request_options() {\n        console.log('SET request_options:', this.model.get('request_options'));\n        this.update_stats_title();\n    }\n    changed_serial_options() {\n        console.log('SET serial_options:', this.model.get('serial_options'));\n        this.update_stats_title();\n    }\n    changed_status() {\n        if (this._el_status && this.model) {\n            this._el_status.textContent = this.model.get('status');\n        }\n    }\n    changed_value() {\n        if (this._el_value && this.model) {\n            this._el_value.textContent = this.model.get('value');\n        }\n    }\n    changed_stats() {\n        if (this._el_stats) {\n            let stats = '';\n            stats += ' RecvF:' + this.model.get('pkt_recv_front');\n            stats += ' SendF:' + this.model.get('pkt_send_front');\n            stats += '  (Front-End)\\r\\n';\n            stats += ' RecvB:' + this.model.get('pkt_recv_back');\n            stats += ' SendB:' + this.model.get('pkt_send_back');\n            stats += '  (Back-End)';\n            this._el_stats.textContent = stats;\n        }\n    }\n    /* stats_zero set all frontend & backend stats to 0 */\n    stats_zero() {\n        this.model.set('pkt_recv_front', [0, 0]);\n        this.model.set('pkt_send_front', [0, 0]);\n        //this.model.send({ type: 'RSTS' }, {}); //Send message to reset backend stats\n        this.model.set('pkt_recv_back', [0, 0]);\n        this.model.set('pkt_send_back', [0, 0]);\n        this.touch();\n    }\n    stats_inc_tuple(key, nBytes, nPackets = 1) {\n        const [oByt, oPkt] = this.model.get(key);\n        const nStats = [oByt + nBytes, oPkt + nPackets];\n        this.model.set(key, nStats);\n        this.touch();\n        return nStats;\n    }\n    cb_read(value) {\n        console.log('DATA-IN', value.length, value);\n        const nStat = this.stats_inc_tuple('pkt_recv_front', value.length);\n        try {\n            this.model.send({ type: 'RECV', pkt_recv_front: nStat }, {}, [value]);\n        }\n        catch (e) {\n            console.log('FAILED send of serial data to backend.', e);\n            //TODO: Shutdown the reader & connection on fatal errors\n            throw e; //Rethrow exception\n        }\n    }\n    cb_connect() {\n        var _a;\n        console.log('cb_connect', this._shp);\n        this.update_stats_title(); //Update serialPortInfo since we connected\n        this.stats_zero(); //Reset statistics on fresh connection\n        (_a = this._shp) === null || _a === void 0 ? void 0 : _a.readLoop((value) => {\n            this.cb_read(value);\n        });\n        console.log('DONE cb_connect');\n    }\n    widget_connect() {\n        this._shp = new SerialHubPort(); //was SerialHubPort.createOneHub();\n        //const reqOpts = { filters: [{usbVendorId: 0x2047}] }; // TI proper ; unused 0x0451 for \"TUSB2046 Hub\"\n        //const serOpts = { baudRate: 115200 };\n        const [reqOpts, serOpts] = this.get_port_options(); //Unpack options to local vars\n        console.log('CONNECT options', reqOpts, serOpts);\n        this._shp.connect(reqOpts, serOpts).then(() => {\n            this.model.set('status', 'Connected');\n            this.cb_connect();\n        }, (reason) => {\n            this.model.set('status', 'Disconnected');\n            this._shp = null;\n        });\n    }\n    widget_disconnect() {\n        var _a;\n        console.log('DISconnect', this, this._shp);\n        (_a = this._shp) === null || _a === void 0 ? void 0 : _a.disconnect().then(() => {\n            this.model.set('status', 'Disconnected');\n            this._shp = null;\n        }, (reason) => {\n            this.model.set('status', 'Stuck');\n        });\n    }\n    click_status(ev) {\n        console.log('click_status', this, this.model, ev);\n        if (this._shp) {\n            this.widget_disconnect();\n        }\n        else {\n            this.widget_connect();\n        }\n        console.log('click_status DONE', this._shp);\n    }\n    click_value(ev) {\n        if (!this || !this.model) {\n            return;\n        }\n    }\n    msg_custom(mData, mBuffs) {\n        //console.log(this, mData, mBuffs);\n        const msgType = mData['type'];\n        if (msgType === 'SEND') {\n            console.log('MSG-SEND', mBuffs);\n            if (this._shp) {\n                const nWritten = this._shp.writeToStream(mBuffs);\n                this.stats_inc_tuple('pkt_send_front', nWritten);\n            }\n        }\n        else {\n            console.log('UNKNOWN MESSAGE: ', msgType, mData, mBuffs);\n        }\n    }\n}\n//# sourceMappingURL=widget.js.map","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../node_modules/css-loader/dist/runtime/sourceMaps.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../node_modules/css-loader/dist/cjs.js!./base.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"\\n\", \"\",{\"version\":3,\"sources\":[],\"names\":[],\"mappings\":\"\",\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","\n      import API from \"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n      import domAPI from \"!../node_modules/style-loader/dist/runtime/styleDomAPI.js\";\n      import insertFn from \"!../node_modules/style-loader/dist/runtime/insertBySelector.js\";\n      import setAttributes from \"!../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js\";\n      import insertStyleElement from \"!../node_modules/style-loader/dist/runtime/insertStyleElement.js\";\n      import styleTagTransformFn from \"!../node_modules/style-loader/dist/runtime/styleTagTransform.js\";\n      import content, * as namedExport from \"!!../node_modules/css-loader/dist/cjs.js!./index.css\";\n      \n      \n\nvar options = {};\n\noptions.styleTagTransform = styleTagTransformFn;\noptions.setAttributes = setAttributes;\n\n      options.insert = insertFn.bind(null, \"head\");\n    \noptions.domAPI = domAPI;\noptions.insertStyleElement = insertStyleElement;\n\nvar update = API(content, options);\n\n\n\nexport * from \"!!../node_modules/css-loader/dist/cjs.js!./index.css\";\n       export default content && content.locals ? content.locals : undefined;\n"],"names":[],"sourceRoot":""}