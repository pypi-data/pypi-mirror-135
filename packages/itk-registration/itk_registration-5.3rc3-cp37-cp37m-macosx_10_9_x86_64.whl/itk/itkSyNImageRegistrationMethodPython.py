# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.


import collections

from sys import version_info as _version_info
if _version_info < (3, 7, 0):
    raise RuntimeError("Python 3.7 or later required")


from . import _ITKRegistrationMethodsv4Python



from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _itkSyNImageRegistrationMethodPython
else:
    import _itkSyNImageRegistrationMethodPython

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

_swig_new_instance_method = _itkSyNImageRegistrationMethodPython.SWIG_PyInstanceMethod_New
_swig_new_static_method = _itkSyNImageRegistrationMethodPython.SWIG_PyStaticMethod_New

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import collections.abc
import itk.itkSpatialObjectBasePython
import itk.itkImageRegionPython
import itk.ITKCommonBasePython
import itk.pyBasePython
import itk.itkSizePython
import itk.itkIndexPython
import itk.itkOffsetPython
import itk.itkAffineTransformPython
import itk.itkTransformBasePython
import itk.itkSymmetricSecondRankTensorPython
import itk.itkMatrixPython
import itk.vnl_matrix_fixedPython
import itk.vnl_vectorPython
import itk.stdcomplexPython
import itk.vnl_matrixPython
import itk.itkCovariantVectorPython
import itk.itkFixedArrayPython
import itk.vnl_vector_refPython
import itk.itkVectorPython
import itk.itkPointPython
import itk.itkArray2DPython
import itk.itkVariableLengthVectorPython
import itk.itkOptimizerParametersPython
import itk.itkArrayPython
import itk.itkDiffusionTensor3DPython
import itk.itkMatrixOffsetTransformBasePython
import itk.itkBoundingBoxPython
import itk.itkMapContainerPython
import itk.itkVectorContainerPython
import itk.itkContinuousIndexPython
import itk.itkSpatialObjectPropertyPython
import itk.itkRGBAPixelPython
import itk.itkBSplineSmoothingOnUpdateDisplacementFieldTransformPython
import itk.itkImagePython
import itk.itkRGBPixelPython
import itk.itkDisplacementFieldTransformPython
import itk.itkImageRegistrationMethodv4Python
import itk.itkMeshBasePython
import itk.itkPointSetPython
import itk.itkObjectToObjectMetricBasePython
import itk.itkSingleValuedCostFunctionv4Python
import itk.itkCostFunctionPython
import itk.itkObjectToObjectOptimizerBasePython
import itk.itkOptimizerParameterScalesEstimatorPython
import itk.itkTransformParametersAdaptorBasePython

def itkSyNImageRegistrationMethodD2D2_New():
    return itkSyNImageRegistrationMethodD2D2.New()

class itkSyNImageRegistrationMethodD2D2(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2DFTD2):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodD2D2
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodD2D2

        Create a new object of the class itkSyNImageRegistrationMethodD2D2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodD2D2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodD2D2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodD2D2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodD2D2 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_swigregister(itkSyNImageRegistrationMethodD2D2)
itkSyNImageRegistrationMethodD2D2___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2___New_orig__
itkSyNImageRegistrationMethodD2D2_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2_cast


def itkSyNImageRegistrationMethodD2D2BSOUDFTD2_New():
    return itkSyNImageRegistrationMethodD2D2BSOUDFTD2.New()

class itkSyNImageRegistrationMethodD2D2BSOUDFTD2(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2BSOUDFTD2):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodD2D2BSOUDFTD2
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodD2D2BSOUDFTD2

        Create a new object of the class itkSyNImageRegistrationMethodD2D2BSOUDFTD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodD2D2BSOUDFTD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodD2D2BSOUDFTD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodD2D2BSOUDFTD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodD2D2BSOUDFTD2 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_swigregister(itkSyNImageRegistrationMethodD2D2BSOUDFTD2)
itkSyNImageRegistrationMethodD2D2BSOUDFTD2___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2___New_orig__
itkSyNImageRegistrationMethodD2D2BSOUDFTD2_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2BSOUDFTD2_cast


def itkSyNImageRegistrationMethodD2D2DFTD2MD2_New():
    return itkSyNImageRegistrationMethodD2D2DFTD2MD2.New()

class itkSyNImageRegistrationMethodD2D2DFTD2MD2(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D2D2DFTD2D2MD2):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodD2D2DFTD2MD2
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodD2D2DFTD2MD2

        Create a new object of the class itkSyNImageRegistrationMethodD2D2DFTD2MD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodD2D2DFTD2MD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodD2D2DFTD2MD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodD2D2DFTD2MD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodD2D2DFTD2MD2 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_swigregister(itkSyNImageRegistrationMethodD2D2DFTD2MD2)
itkSyNImageRegistrationMethodD2D2DFTD2MD2___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2___New_orig__
itkSyNImageRegistrationMethodD2D2DFTD2MD2_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD2D2DFTD2MD2_cast


def itkSyNImageRegistrationMethodD3D3_New():
    return itkSyNImageRegistrationMethodD3D3.New()

class itkSyNImageRegistrationMethodD3D3(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3DFTD3):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodD3D3
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodD3D3

        Create a new object of the class itkSyNImageRegistrationMethodD3D3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodD3D3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodD3D3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodD3D3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodD3D3 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_swigregister(itkSyNImageRegistrationMethodD3D3)
itkSyNImageRegistrationMethodD3D3___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3___New_orig__
itkSyNImageRegistrationMethodD3D3_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3_cast


def itkSyNImageRegistrationMethodD3D3BSOUDFTD3_New():
    return itkSyNImageRegistrationMethodD3D3BSOUDFTD3.New()

class itkSyNImageRegistrationMethodD3D3BSOUDFTD3(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3BSOUDFTD3):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodD3D3BSOUDFTD3
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodD3D3BSOUDFTD3

        Create a new object of the class itkSyNImageRegistrationMethodD3D3BSOUDFTD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodD3D3BSOUDFTD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodD3D3BSOUDFTD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodD3D3BSOUDFTD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodD3D3BSOUDFTD3 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_swigregister(itkSyNImageRegistrationMethodD3D3BSOUDFTD3)
itkSyNImageRegistrationMethodD3D3BSOUDFTD3___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3___New_orig__
itkSyNImageRegistrationMethodD3D3BSOUDFTD3_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3BSOUDFTD3_cast


def itkSyNImageRegistrationMethodD3D3DFTD3MD3_New():
    return itkSyNImageRegistrationMethodD3D3DFTD3MD3.New()

class itkSyNImageRegistrationMethodD3D3DFTD3MD3(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D3D3DFTD3D3MD3):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodD3D3DFTD3MD3
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodD3D3DFTD3MD3

        Create a new object of the class itkSyNImageRegistrationMethodD3D3DFTD3MD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodD3D3DFTD3MD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodD3D3DFTD3MD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodD3D3DFTD3MD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodD3D3DFTD3MD3 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_swigregister(itkSyNImageRegistrationMethodD3D3DFTD3MD3)
itkSyNImageRegistrationMethodD3D3DFTD3MD3___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3___New_orig__
itkSyNImageRegistrationMethodD3D3DFTD3MD3_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD3D3DFTD3MD3_cast


def itkSyNImageRegistrationMethodD4D4_New():
    return itkSyNImageRegistrationMethodD4D4.New()

class itkSyNImageRegistrationMethodD4D4(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D4D4DFTD4):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodD4D4
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodD4D4

        Create a new object of the class itkSyNImageRegistrationMethodD4D4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodD4D4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodD4D4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodD4D4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodD4D4 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_swigregister(itkSyNImageRegistrationMethodD4D4)
itkSyNImageRegistrationMethodD4D4___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4___New_orig__
itkSyNImageRegistrationMethodD4D4_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4_cast


def itkSyNImageRegistrationMethodD4D4BSOUDFTD4_New():
    return itkSyNImageRegistrationMethodD4D4BSOUDFTD4.New()

class itkSyNImageRegistrationMethodD4D4BSOUDFTD4(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D4D4BSOUDFTD4):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodD4D4BSOUDFTD4
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodD4D4BSOUDFTD4

        Create a new object of the class itkSyNImageRegistrationMethodD4D4BSOUDFTD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodD4D4BSOUDFTD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodD4D4BSOUDFTD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodD4D4BSOUDFTD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodD4D4BSOUDFTD4 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_swigregister(itkSyNImageRegistrationMethodD4D4BSOUDFTD4)
itkSyNImageRegistrationMethodD4D4BSOUDFTD4___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4___New_orig__
itkSyNImageRegistrationMethodD4D4BSOUDFTD4_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4BSOUDFTD4_cast


def itkSyNImageRegistrationMethodD4D4DFTD4MD4_New():
    return itkSyNImageRegistrationMethodD4D4DFTD4MD4.New()

class itkSyNImageRegistrationMethodD4D4DFTD4MD4(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4D4D4DFTD4D4MD4):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodD4D4DFTD4MD4
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodD4D4DFTD4MD4

        Create a new object of the class itkSyNImageRegistrationMethodD4D4DFTD4MD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodD4D4DFTD4MD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodD4D4DFTD4MD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodD4D4DFTD4MD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodD4D4DFTD4MD4 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_swigregister(itkSyNImageRegistrationMethodD4D4DFTD4MD4)
itkSyNImageRegistrationMethodD4D4DFTD4MD4___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4___New_orig__
itkSyNImageRegistrationMethodD4D4DFTD4MD4_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodD4D4DFTD4MD4_cast


def itkSyNImageRegistrationMethodF2F2_New():
    return itkSyNImageRegistrationMethodF2F2.New()

class itkSyNImageRegistrationMethodF2F2(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2DFTD2):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodF2F2
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodF2F2

        Create a new object of the class itkSyNImageRegistrationMethodF2F2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodF2F2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodF2F2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodF2F2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodF2F2 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_swigregister(itkSyNImageRegistrationMethodF2F2)
itkSyNImageRegistrationMethodF2F2___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2___New_orig__
itkSyNImageRegistrationMethodF2F2_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2_cast


def itkSyNImageRegistrationMethodF2F2BSOUDFTD2_New():
    return itkSyNImageRegistrationMethodF2F2BSOUDFTD2.New()

class itkSyNImageRegistrationMethodF2F2BSOUDFTD2(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2BSOUDFTD2):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodF2F2BSOUDFTD2
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodF2F2BSOUDFTD2

        Create a new object of the class itkSyNImageRegistrationMethodF2F2BSOUDFTD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodF2F2BSOUDFTD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodF2F2BSOUDFTD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodF2F2BSOUDFTD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodF2F2BSOUDFTD2 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_swigregister(itkSyNImageRegistrationMethodF2F2BSOUDFTD2)
itkSyNImageRegistrationMethodF2F2BSOUDFTD2___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2___New_orig__
itkSyNImageRegistrationMethodF2F2BSOUDFTD2_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2BSOUDFTD2_cast


def itkSyNImageRegistrationMethodF2F2DFTD2MD2_New():
    return itkSyNImageRegistrationMethodF2F2DFTD2MD2.New()

class itkSyNImageRegistrationMethodF2F2DFTD2MD2(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F2F2DFTD2F2MD2):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodF2F2DFTD2MD2
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodF2F2DFTD2MD2

        Create a new object of the class itkSyNImageRegistrationMethodF2F2DFTD2MD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodF2F2DFTD2MD2.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodF2F2DFTD2MD2.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodF2F2DFTD2MD2.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodF2F2DFTD2MD2 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_swigregister(itkSyNImageRegistrationMethodF2F2DFTD2MD2)
itkSyNImageRegistrationMethodF2F2DFTD2MD2___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2___New_orig__
itkSyNImageRegistrationMethodF2F2DFTD2MD2_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF2F2DFTD2MD2_cast


def itkSyNImageRegistrationMethodF3F3_New():
    return itkSyNImageRegistrationMethodF3F3.New()

class itkSyNImageRegistrationMethodF3F3(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3DFTD3):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodF3F3
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodF3F3

        Create a new object of the class itkSyNImageRegistrationMethodF3F3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodF3F3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodF3F3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodF3F3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodF3F3 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_swigregister(itkSyNImageRegistrationMethodF3F3)
itkSyNImageRegistrationMethodF3F3___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3___New_orig__
itkSyNImageRegistrationMethodF3F3_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3_cast


def itkSyNImageRegistrationMethodF3F3BSOUDFTD3_New():
    return itkSyNImageRegistrationMethodF3F3BSOUDFTD3.New()

class itkSyNImageRegistrationMethodF3F3BSOUDFTD3(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3BSOUDFTD3):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodF3F3BSOUDFTD3
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodF3F3BSOUDFTD3

        Create a new object of the class itkSyNImageRegistrationMethodF3F3BSOUDFTD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodF3F3BSOUDFTD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodF3F3BSOUDFTD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodF3F3BSOUDFTD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodF3F3BSOUDFTD3 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_swigregister(itkSyNImageRegistrationMethodF3F3BSOUDFTD3)
itkSyNImageRegistrationMethodF3F3BSOUDFTD3___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3___New_orig__
itkSyNImageRegistrationMethodF3F3BSOUDFTD3_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3BSOUDFTD3_cast


def itkSyNImageRegistrationMethodF3F3DFTD3MD3_New():
    return itkSyNImageRegistrationMethodF3F3DFTD3MD3.New()

class itkSyNImageRegistrationMethodF3F3DFTD3MD3(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F3F3DFTD3F3MD3):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodF3F3DFTD3MD3
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodF3F3DFTD3MD3

        Create a new object of the class itkSyNImageRegistrationMethodF3F3DFTD3MD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodF3F3DFTD3MD3.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodF3F3DFTD3MD3.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodF3F3DFTD3MD3.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodF3F3DFTD3MD3 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_swigregister(itkSyNImageRegistrationMethodF3F3DFTD3MD3)
itkSyNImageRegistrationMethodF3F3DFTD3MD3___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3___New_orig__
itkSyNImageRegistrationMethodF3F3DFTD3MD3_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF3F3DFTD3MD3_cast


def itkSyNImageRegistrationMethodF4F4_New():
    return itkSyNImageRegistrationMethodF4F4.New()

class itkSyNImageRegistrationMethodF4F4(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F4F4DFTD4):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodF4F4
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodF4F4

        Create a new object of the class itkSyNImageRegistrationMethodF4F4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodF4F4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodF4F4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodF4F4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodF4F4 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_swigregister(itkSyNImageRegistrationMethodF4F4)
itkSyNImageRegistrationMethodF4F4___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4___New_orig__
itkSyNImageRegistrationMethodF4F4_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4_cast


def itkSyNImageRegistrationMethodF4F4BSOUDFTD4_New():
    return itkSyNImageRegistrationMethodF4F4BSOUDFTD4.New()

class itkSyNImageRegistrationMethodF4F4BSOUDFTD4(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F4F4BSOUDFTD4):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodF4F4BSOUDFTD4
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodF4F4BSOUDFTD4

        Create a new object of the class itkSyNImageRegistrationMethodF4F4BSOUDFTD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodF4F4BSOUDFTD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodF4F4BSOUDFTD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodF4F4BSOUDFTD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodF4F4BSOUDFTD4 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_swigregister(itkSyNImageRegistrationMethodF4F4BSOUDFTD4)
itkSyNImageRegistrationMethodF4F4BSOUDFTD4___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4___New_orig__
itkSyNImageRegistrationMethodF4F4BSOUDFTD4_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4BSOUDFTD4_cast


def itkSyNImageRegistrationMethodF4F4DFTD4MD4_New():
    return itkSyNImageRegistrationMethodF4F4DFTD4MD4.New()

class itkSyNImageRegistrationMethodF4F4DFTD4MD4(itk.itkImageRegistrationMethodv4Python.itkImageRegistrationMethodv4REGv4F4F4DFTD4F4MD4):
    r"""


    Interface method for the performing greedy SyN image registration.

    For greedy SyN we use m_Transform to map the time-parameterized middle
    image to the fixed image (and vice versa using
    m_Transform->GetInverseDisplacementField() ). We employ another ivar,
    m_InverseTransform, to map the time-parameterized middle image to the
    moving image.

    Output: The output is the updated transform which has been added to
    the composite transform.

    This implementation is based on the source code in Advanced
    Normalization Tools (ANTs)

    Avants, B. B.; Tustison, N. J.; Song, G.; Cook, P. A.; Klein, A. &
    Gee, J. C. A reproducible evaluation of ANTs similarity metric
    performance in brain image registration. Neuroimage, Penn Image
    Computing and Science Laboratory, University of Pennsylvania, 2011,
    54, 2033-2044

    The original paper discussing the method is here:

    Avants, B. B.; Epstein, C. L.; Grossman, M. & Gee, J. C. Symmetric
    diffeomorphic image registration with cross-correlation: evaluating
    automated labeling of elderly and neurodegenerative brain. Med Image
    Anal, Department of Radiology, University of Pennsylvania, 2008, 12,
    26-41

    The method evolved since that time with crucial contributions from
    Gang Song and Nick Tustison. Though similar in spirit, this
    implementation is not identical.

    Todo Need to allow the fixed image to have a composite transform.

    Nick Tustison

    Brian Avants 
    """

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __New_orig__ = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4___New_orig__)
    Clone = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_Clone)
    SetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_SetLearningRate)
    GetLearningRate = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_GetLearningRate)
    SetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_SetNumberOfIterationsPerLevel)
    GetNumberOfIterationsPerLevel = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_GetNumberOfIterationsPerLevel)
    SetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_SetConvergenceThreshold)
    GetConvergenceThreshold = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_GetConvergenceThreshold)
    SetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_SetConvergenceWindowSize)
    GetConvergenceWindowSize = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_GetConvergenceWindowSize)
    SetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_SetDownsampleImagesForMetricDerivatives)
    GetDownsampleImagesForMetricDerivatives = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_GetDownsampleImagesForMetricDerivatives)
    SetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_SetAverageMidPointGradients)
    GetAverageMidPointGradients = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_GetAverageMidPointGradients)
    SetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_SetGaussianSmoothingVarianceForTheUpdateField)
    GetGaussianSmoothingVarianceForTheUpdateField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_GetGaussianSmoothingVarianceForTheUpdateField)
    SetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_SetGaussianSmoothingVarianceForTheTotalField)
    GetGaussianSmoothingVarianceForTheTotalField = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_GetGaussianSmoothingVarianceForTheTotalField)
    GetModifiableFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_GetModifiableFixedToMiddleTransform)
    GetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_GetFixedToMiddleTransform)
    GetModifiableMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_GetModifiableMovingToMiddleTransform)
    GetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_GetMovingToMiddleTransform)
    SetFixedToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_SetFixedToMiddleTransform)
    SetMovingToMiddleTransform = _swig_new_instance_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_SetMovingToMiddleTransform)
    __swig_destroy__ = _itkSyNImageRegistrationMethodPython.delete_itkSyNImageRegistrationMethodF4F4DFTD4MD4
    cast = _swig_new_static_method(_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_cast)

    def New(*args, **kargs):
        """New() -> itkSyNImageRegistrationMethodF4F4DFTD4MD4

        Create a new object of the class itkSyNImageRegistrationMethodF4F4DFTD4MD4 and set the input and the parameters if some
        named or non-named arguments are passed to that method.

        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.

        The named parameters are used by calling the method with the same name prefixed by 'Set'.

        Ex:

          itkSyNImageRegistrationMethodF4F4DFTD4MD4.New(reader, threshold=10)

        is (most of the time) equivalent to:

          obj = itkSyNImageRegistrationMethodF4F4DFTD4MD4.New()
          obj.SetInput(0, reader.GetOutput())
          obj.SetThreshold(10)
        """
        obj = itkSyNImageRegistrationMethodF4F4DFTD4MD4.__New_orig__()
        from itk.support import template_class
        template_class.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)


# Register itkSyNImageRegistrationMethodF4F4DFTD4MD4 in _itkSyNImageRegistrationMethodPython:
_itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_swigregister(itkSyNImageRegistrationMethodF4F4DFTD4MD4)
itkSyNImageRegistrationMethodF4F4DFTD4MD4___New_orig__ = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4___New_orig__
itkSyNImageRegistrationMethodF4F4DFTD4MD4_cast = _itkSyNImageRegistrationMethodPython.itkSyNImageRegistrationMethodF4F4DFTD4MD4_cast


from itk.support import helpers
import itk.support.types as itkt
from typing import Sequence, Tuple, Union

@helpers.accept_array_like_xarray_torch
def sy_n_image_registration_method(*args,  learning_rate: float=..., number_of_iterations_per_level: Sequence[int]=..., convergence_threshold: float=..., convergence_window_size: int=..., downsample_images_for_metric_derivatives: bool=..., average_mid_point_gradients: bool=..., gaussian_smoothing_variance_for_the_update_field: float=..., gaussian_smoothing_variance_for_the_total_field: float=..., fixed_to_middle_transform=..., moving_to_middle_transform=..., fixed_image: Union[int, itkt.Image]=..., moving_image: Union[itkt.Image, int]=..., fixed_point_set: Union[itkt.PointSet, int]=..., moving_point_set: Union[itkt.PointSet, int]=..., optimizer=..., optimizer_weights=..., metric=..., metric_sampling_strategy=..., metric_sampling_percentage: float=..., metric_sampling_percentage_per_level: Sequence[float]=..., fixed_initial_transform_input=..., fixed_initial_transform: itkt.Transform=..., moving_initial_transform_input=..., moving_initial_transform: itkt.Transform=..., initial_transform_input=..., initial_transform: itkt.Transform=..., transform_parameters_adaptors_per_level=..., number_of_levels: int=..., shrink_factors_per_level: Sequence[int]=..., shrink_factors_per_dimension: int=..., smoothing_sigmas_per_level: Sequence[float]=..., smoothing_sigmas_are_specified_in_physical_units: bool=..., initialize_center_of_linear_output_transform: bool=...,**kwargs):
    """Functional interface for SyNImageRegistrationMethod"""
    import itk

    kwarg_typehints = { 'learning_rate':learning_rate,'number_of_iterations_per_level':number_of_iterations_per_level,'convergence_threshold':convergence_threshold,'convergence_window_size':convergence_window_size,'downsample_images_for_metric_derivatives':downsample_images_for_metric_derivatives,'average_mid_point_gradients':average_mid_point_gradients,'gaussian_smoothing_variance_for_the_update_field':gaussian_smoothing_variance_for_the_update_field,'gaussian_smoothing_variance_for_the_total_field':gaussian_smoothing_variance_for_the_total_field,'fixed_to_middle_transform':fixed_to_middle_transform,'moving_to_middle_transform':moving_to_middle_transform,'fixed_image':fixed_image,'moving_image':moving_image,'fixed_point_set':fixed_point_set,'moving_point_set':moving_point_set,'optimizer':optimizer,'optimizer_weights':optimizer_weights,'metric':metric,'metric_sampling_strategy':metric_sampling_strategy,'metric_sampling_percentage':metric_sampling_percentage,'metric_sampling_percentage_per_level':metric_sampling_percentage_per_level,'fixed_initial_transform_input':fixed_initial_transform_input,'fixed_initial_transform':fixed_initial_transform,'moving_initial_transform_input':moving_initial_transform_input,'moving_initial_transform':moving_initial_transform,'initial_transform_input':initial_transform_input,'initial_transform':initial_transform,'transform_parameters_adaptors_per_level':transform_parameters_adaptors_per_level,'number_of_levels':number_of_levels,'shrink_factors_per_level':shrink_factors_per_level,'shrink_factors_per_dimension':shrink_factors_per_dimension,'smoothing_sigmas_per_level':smoothing_sigmas_per_level,'smoothing_sigmas_are_specified_in_physical_units':smoothing_sigmas_are_specified_in_physical_units,'initialize_center_of_linear_output_transform':initialize_center_of_linear_output_transform }
    specified_kwarg_typehints = { k:v for (k,v) in kwarg_typehints.items() if kwarg_typehints[k] is not ... }
    kwargs.update(specified_kwarg_typehints)

    instance = itk.SyNImageRegistrationMethod.New(*args, **kwargs)
    return instance.__internal_call__()

def sy_n_image_registration_method_init_docstring():
    import itk
    from itk.support import template_class

    filter_class = itk.ITKRegistrationMethodsv4.SyNImageRegistrationMethod
    sy_n_image_registration_method.process_object = filter_class
    is_template = isinstance(filter_class, template_class.itkTemplate)
    if is_template:
        filter_object = filter_class.values()[0]
    else:
        filter_object = filter_class

    sy_n_image_registration_method.__doc__ = filter_object.__doc__




