[tool.poetry]
name = "graia-ariadne"
version = "0.5.1-pre4"
description = "Another elegant framework for mirai and mirai-api-http v2."
authors = [
    "BlueGlassBlock <blueglassblock@outlook.com>",
    "GreyElaina <GreyElaina@outlook.com>"
]
packages = [{ include = "graia", from = "src" }]
readme = "README.md"
repository = "https://github.com/GraiaProject/Ariadne"
homepage = "https://graia.rtfd.io/"

[[tool.poetry.source]]
name = "tuna-tsinghua"
default = false
url = "https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/"

[[tool.poetry.source]]
name = "sustech"
default = false
url = "https://mirrors.sustech.edu.cn/pypi/simple/"

[[tool.poetry.source]]
name = "aliyun"
default = false
url = "https://mirrors.aliyun.com/pypi/simple/"

[[tool.poetry.source]]
name = "tencent-cloud"
default = false
url = "https://mirrors.cloud.tencent.com/pypi/simple"

[[tool.poetry.source]]
name = "netease"
default = false
url = "https://mirrors.163.com/pypi/simple/"

[tool.poetry.dependencies]
python = "^3.8"
graia-broadcast = ">=0.14.4"
aiohttp = "^3.7.4"
pydantic = "^1.8.2"
yarl = "^1.7"
loguru = "^0.5"
typing-extensions = "^4.0.0"
prompt-toolkit = "^3.0.24"
arclet-alconna = { version = "^0.4.1", optional = true }
graia-scheduler = { version = "^0.0.6", optional = true }
graia-saya = { version = "^0.0.13", optional = true }
mkdocs-material = { version = ">=8.1.2", optional = true }
pdoc = { version = "^8.0", optional = true }
regex = "^2021.11.10"

[tool.poetry.extras]
alconna = ["arclet-alconna"]
graia = ["graia-saya", "graia-scheduler"]
full = ["graia-saya", "graia-scheduler", "arclet-alconna"]
document = ["mkdocs-material", "pdoc"]

[tool.poetry.dev-dependencies]
black = ">=21.10b0"
isort = ">=5.9.3"
pytest = "^6.2"
coverage = "^6.2"
flake8 = "^4.0"
pytest-asyncio = "^0.16.0"
devtools = ">= 0.8"
objgraph = ">= 3.5"
pydeps = "^1.10"
pre-commit = "^2.16"
yappi = { version = "^1.3.3", optional = true }
pylint = "^2.12.2"

[tool.isort]
profile = "black"

[tool.black]
line-length = 110
target-version = ['py39']

[tool.pylint."MESSAGE CONTROL"]
max-line-length = 110
extension-pkg-whitelist = ["pydantic"]
disable = [
    "broad-except",
    "cyclic-import",
    "wrong-import-order", # isort conflict
    "wrong-import-position",
    "unused-import", # flake8
    "invalid-name",
    "redefined-builtin",
    "redefined-outer-name",
    "import-outside-toplevel",
    "too-many-lines", # graia.ariadne.app
    "too-many-arguments",
    "too-many-branches",
    "too-many-statements",
    "too-many-instance-attributes",
    "too-few-public-methods",
    "too-many-public-methods",
    "super-init-not-called",
    "protected-access",
    "inconsistent-return-statements", # bcc dispatchers
    "duplicate-code", # imports and inherited method init
    "no-self-argument", # pydantic validators
    "no-member", # pydantic validators
    "no-self-use", # pydantic validators

]
ignore-paths = [".*test.*", ".*entry.*", ".*dev.*", ".*venv*"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.coverage.run]
branch = true
omit = ["*/test/*"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    # standard pragma
    "pragma: no cover",
    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",
    "if (typing\\.)?TYPE_CHECKING( is True)?:",
    "\\.\\.\\.",
    "pass",
    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    # Don't complain overload method / functions
    "@(typing\\.)?overload"
]
